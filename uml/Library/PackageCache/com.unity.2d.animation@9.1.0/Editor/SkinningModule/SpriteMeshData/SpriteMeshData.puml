@startuml
class SpriteBoneData {
    + parentId : int
    + localPosition : Vector2
    + localRotation : Quaternion
    + position : Vector2
    + endPosition : Vector2
    + depth : float
    + length : float
}
abstract class BaseSpriteMeshData {
    - m_Vertices : Vector2[]
    - m_VertexWeights : EditableBoneWeight[]
    - m_Indices : int[]
    - m_Edges : int2[]
    - m_OutlineEdges : int2[]
    - m_VertexPositionsOverride : Vector2[] = null
    + {abstract} frame : Rect <<get>>
    + vertices : Vector2[] <<get>>
    + vertexWeights : EditableBoneWeight[] <<get>>
    + indices : int[] <<get>>
    + edges : int2[] <<get>>
    + outlineEdges : int2[] <<get>>
    + vertexCount : int <<get>>
    + <<virtual>> boneCount : int <<get>>
    + <<virtual>> spriteName : string <<get>>
    + SetIndices(newIndices:int[]) : void
    - UpdateOutlineEdges() : void
    + SetEdges(newEdges:int2[]) : void
    + SetVertices(newVertices:Vector2[], newWeights:EditableBoneWeight[]) : void
    + SetVertexPositionsOverride(vertexPositionsOverride:Vector2[]) : void
    + ClearVertexPositionOverride() : void
    + AddVertex(position:Vector2, weight:BoneWeight) : void
    + RemoveVertex(index:int) : void
    + {abstract} GetBoneData(index:int) : SpriteBoneData
    + {abstract} GetBoneDepth(index:int) : float
    + Clear() : void
}
class SpriteMeshData {
    - m_Bones : List<SpriteBoneData>
    - m_Frame : Rect
    + <<override>> frame : Rect <<get>>
    + <<override>> boneCount : int <<get>>
    + bones : List<SpriteBoneData> <<get>> <<set>>
    + <<override>> GetBoneData(index:int) : SpriteBoneData
    + <<override>> GetBoneDepth(index:int) : float
    + SetFrame(newFrame:Rect) : void
}
BaseSpriteMeshData <|-- SpriteMeshData
@enduml
