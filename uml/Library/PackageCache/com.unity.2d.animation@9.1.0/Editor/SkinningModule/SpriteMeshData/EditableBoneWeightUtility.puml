@startuml
struct BoneWeightData {
    + boneIndex : int
    + weight : float
    + CompareTo(other:BoneWeightData) : int
}
class EditableBoneWeightUtility <<static>> {
    - {static} s_BoneWeightDataList : List<BoneWeightData>
    - {static} s_LerpFirst : EditableBoneWeight
    - {static} s_LerpSecond : EditableBoneWeight
    - {static} s_LerpResult : EditableBoneWeight
    + {static} CreateFromBoneWeight(boneWeight:BoneWeight) : EditableBoneWeight
    + {static} SetFromBoneWeight(editableBoneWeight:EditableBoneWeight, boneWeight:BoneWeight) : void
    + {static} ToBoneWeight(editableBoneWeight:EditableBoneWeight, sortByWeight:bool) : BoneWeight
    + {static} ContainsBoneIndex(editableBoneWeight:EditableBoneWeight, boneIndex:int) : bool
    + {static} GetChannelFromBoneIndex(editableBoneWeight:EditableBoneWeight, boneIndex:int) : int
    + {static} Clamp(editableBoneWeight:EditableBoneWeight, numChannels:int, sortChannels:bool) : void
    + {static} ValidateChannels(editableBoneWeight:EditableBoneWeight) : void
    + {static} Sum(editableBoneWeight:EditableBoneWeight) : float
    + {static} Normalize(editableBoneWeight:EditableBoneWeight) : void
    + {static} CompensateOtherChannels(editableBoneWeight:EditableBoneWeight, masterChannel:int) : void
    + {static} UnifyChannelsWithSameBoneIndex(editableBoneWeight:EditableBoneWeight) : void
    + {static} FilterChannels(editableBoneWeight:EditableBoneWeight, weightTolerance:float) : void
    + {static} Lerp(first:BoneWeight, second:BoneWeight, t:float) : BoneWeight
    - {static} Lerp(first:EditableBoneWeight, second:EditableBoneWeight, result:EditableBoneWeight, t:float) : void
}
"IComparable`1" "<BoneWeightData>" <|-- BoneWeightData
@enduml
