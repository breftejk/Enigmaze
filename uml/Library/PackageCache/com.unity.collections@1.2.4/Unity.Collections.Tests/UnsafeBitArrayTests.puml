@startuml
class UnsafeBitArrayTests {
    + UnsafeBitArray_Get_Set_Long() : void
    + UnsafeBitArray_Get_Set_Short() : void
    + UnsafeBitArray_Get_Set_Tiny() : void
    + <<unsafe>> UnsafeBitArray_Throws() : void
    {static} - GetBitsTest(test:UnsafeBitArray, pos:int, numBits:int) : void
    + UnsafeBitArray_GetBits() : void
    {static} - SetBitsTest(test:UnsafeBitArray, pos:int, value:ulong, numBits:int) : void
    + UnsafeBitArray_SetBits() : void
    {static} - CopyBitsTest(dstBitArray:UnsafeBitArray, dstPos:int, srcBitArray:UnsafeBitArray, srcPos:int, numBits:int) : void
    {static} - CopyBitsTest(test:UnsafeBitArray, dstPos:int, srcPos:int, numBits:int) : void
    + UnsafeBitArray_Copy() : void
    + UnsafeBitArray_CopyBetweenBitArrays() : void
    + <<unsafe>> UnsafeBitArray_Copy_Throws() : void
    + <<unsafe>> UnsafeBitArray_Find() : void
    + <<unsafe>> UnsafeBitArray_Find_With_Begin_End() : void
    + <<unsafe>> UnsafeBitArray_Find_Throws() : void
    - findWithPattern(test:UnsafeBitArray, pattern:byte, numBits:int) : void
    + UnsafeBitArray_FindWithPattern() : void
    + UnsafeBitArray_FindInTinyBitArray() : void
    + UnsafeBitArray_FindLastUnsetBit(numBits:int) : void
    + UnsafeBitArray_CustomAllocatorTest() : void
    + <<unsafe>> UnsafeBitArray_BurstedCustomAllocatorTest() : void
}
struct BurstedCustomAllocatorJob {
    + <<unsafe>> Allocator : CustomAllocatorTests.CountingAllocator*
    + Execute() : void
}
UnsafeBitArrayTests +-- BurstedCustomAllocatorJob
IJob <|-- BurstedCustomAllocatorJob
@enduml
