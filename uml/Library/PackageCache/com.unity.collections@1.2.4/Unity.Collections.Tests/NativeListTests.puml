@startuml
class NativeListTests {
    {static} - ExpectedLength(container:NativeList<T>, expected:int) : void
    + NullListThrow() : void
    + NativeList_Allocate_Deallocate_Read_Write() : void
    + NativeArrayFromNativeList() : void
    + NativeArrayFromNativeListInvalidatesOnAdd() : void
    + NativeArrayFromNativeListInvalidatesOnCapacityChange() : void
    + NativeArrayFromNativeListInvalidatesOnDispose() : void
    + NativeArrayFromNativeListMayDeallocate() : void
    + CopiedNativeListIsKeptInSync() : void
    + NativeList_CopyFrom_Managed() : void
    + NativeList_CopyFrom_Unmanaged() : void
    + TempListInBurstJob() : void
    + NativeList_DisposeJob() : void
    + ForEachWorks() : void
    + NativeQueue_DisposeJobWithMissingDependencyThrows() : void
    + NativeQueue_DisposeJobCantBeScheduled() : void
    + NativeList_UseAfterFree_UsesCustomOwnerTypeName() : void
    + AtomicSafetyHandle_AllocatorTemp_UniqueStaticSafetyIds() : void
    + NativeList_CreateAndUseAfterFreeInBurstJob_UsesCustomOwnerTypeName() : void
    + <<unsafe>> NativeList_IndexOf() : void
    + NativeList_InsertRangeWithBeginEnd() : void
    + NativeList_CustomAllocatorTest() : void
    + <<unsafe>> NativeList_BurstedCustomAllocatorTest() : void
    + <<unsafe>> NativeList_SetCapacity() : void
    + <<unsafe>> NativeList_TrimExcess() : void
}
struct TempListInJob {
    + Output : NativeArray<int>
    + Execute() : void
}
struct NativeQueueAddJob {
    - queue : NativeQueue<int>
    + NativeQueueAddJob(queue:NativeQueue<int>)
    + Execute() : void
}
struct NativeListCreateAndUseAfterFreeBurst {
    + Execute() : void
}
struct BurstedCustomAllocatorJob {
    + <<unsafe>> Allocator : CustomAllocatorTests.CountingAllocator*
    + Execute() : void
}
CollectionsTestFixture <|-- NativeListTests
NativeListTests +-- TempListInJob
IJob <|-- TempListInJob
NativeListTests +-- NativeQueueAddJob
IJob <|-- NativeQueueAddJob
NativeListTests +-- NativeListCreateAndUseAfterFreeBurst
IJob <|-- NativeListCreateAndUseAfterFreeBurst
NativeListTests +-- BurstedCustomAllocatorJob
IJob <|-- BurstedCustomAllocatorJob
@enduml
