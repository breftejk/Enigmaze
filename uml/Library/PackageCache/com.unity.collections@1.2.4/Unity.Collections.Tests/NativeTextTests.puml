@startuml
class NativeTextTests {
    + NativeTextFixedStringCtors() : void
    + NativeTextCorrectLengthAfterClear() : void
    + NativeTextFormatExtension1Params() : void
    + NativeTextFormatExtension2Params() : void
    + NativeTextFormatExtension3Params() : void
    + NativeTextFormatExtension4Params() : void
    + NativeTextFormatExtension5Params() : void
    + NativeTextFormatExtension6Params() : void
    + NativeTextFormatExtension7Params() : void
    + NativeTextFormatExtension8Params() : void
    + NativeTextFormatExtension9Params() : void
    + NativeTextFormatExtension10Params() : void
    + NativeTextAppendGrows() : void
    + NativeTextAppendString() : void
    + NativeTextCopyFromBytesWorks(a:String) : void
    + NativeTextToStringWorks(a:String) : void
    + NativeTextEqualsWorks(a:String, b:String) : void
    + NativeTextForEach() : void
    + NativeTextIndexOf() : void
    + NativeTextLastIndexOf() : void
    + NativeTextContains() : void
    + NativeTextComparisons() : void
    + NativeText_CustomAllocatorTest() : void
    + <<unsafe>> NativeText_BurstedCustomAllocatorTest() : void
    + NativeTextIsEmpty() : void
    + NativeTextIsEmptyReturnsTrueForNotConstructed() : void
    + NativeTextReadonlyCtor() : void
    + NativeTextReadOnlyEqualsWorks(a:String, b:String) : void
    + NativeTextReadOnlyIndexOf() : void
    + NativeTextReadOnlyLastIndexOf() : void
    + NativeTextReadOnlyContains() : void
    + NativeTextReadOnlyComparisons() : void
    + NativeTextReadOnlyMakeMoreThanOne() : void
    + NativeTextReadOnlyIsNotACopy() : void
    + NativeTextReadOnlyIsEmpty() : void
    + NativeTextReadOnlyIsEmptyReturnsTrueOrThrowsForNotConstructed() : void
    + NativeTextReadOnlyIsNotWritable() : void
    + NativeTextReadOnlyCannotBeUsedAfterSourceIsDisposed() : void
    + NativeTextReadOnlyCannotBeUsedAfterSourceIsChanged() : void
    + NativeTextReadOnlyModificationDuringEnumerationThrows() : void
    + NativeTextReadOnlyCannotScheduledSourceTextForWrite() : void
    + NativeTextReadOnlyCanReadFromSourceTextModifiedInJob() : void
    + NativeTextReadOnlyCanScheduledSourceTextForRead() : void
    + NativeTextReadOnlyThrowWhenUsingReadOnlyInJobAfterSourceHasBeenDisposed() : void
}
struct BurstedCustomAllocatorJob {
    + <<unsafe>> Allocator : CustomAllocatorTests.CountingAllocator*
    + Execute() : void
}
struct TestWriteOfTextMappedToReadOnly {
    + Text : NativeText
    + Execute() : void
}
struct TestClearTextMappedToReadOnly {
    + Text : NativeText
    + Execute() : void
}
struct TestReadOfTextMappedToReadOnly {
    + Text : NativeText
    + Execute() : void
}
struct TestReadFromReadOnly {
    + RO : NativeText.ReadOnly
    + Execute() : void
}
NativeTextTests +-- BurstedCustomAllocatorJob
IJob <|-- BurstedCustomAllocatorJob
NativeTextTests +-- TestWriteOfTextMappedToReadOnly
IJob <|-- TestWriteOfTextMappedToReadOnly
NativeTextTests +-- TestClearTextMappedToReadOnly
IJob <|-- TestClearTextMappedToReadOnly
NativeTextTests +-- TestReadOfTextMappedToReadOnly
IJob <|-- TestReadOfTextMappedToReadOnly
NativeTextTests +-- TestReadFromReadOnly
IJob <|-- TestReadFromReadOnly
@enduml
