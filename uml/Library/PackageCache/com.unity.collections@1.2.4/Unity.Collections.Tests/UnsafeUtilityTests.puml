@startuml
class UnsafeUtilityTests {
    - MakeTestArray(data:T[]) : NativeArray<T>
    + ReinterpretUIntFloat() : void
    + ReinterpretUInt4Float() : void
    + ReinterpretFloatUint4() : void
    + MismatchThrows1() : void
    + MismatchThrows2() : void
    + AliasCanBeDisposed() : void
    + CannotUseAliasAfterSourceIsDisposed() : void
    + MutabilityWorks() : void
    + UnsafeUtility_AlignOf() : void
    + <<unsafe>> UnsafeUtility_MemSwap() : void
    + <<unsafe>> UnsafeUtility_MemSwap_DoesThrow_Overlapped() : void
    + <<unsafe>> UnsafeUtility_ReadArrayElementBoundsChecked_Works() : void
    + <<unsafe>> UnsafeUtility_WriteArrayElementBoundsChecked_Works() : void
    + <<unsafe>> UnsafeUtility_AsRefAddressOfIn_Works() : void
}
struct DummyVec {
    + A : uint
    + B : uint
    + C : uint
    + D : uint
}
struct AlignOfX {
    - x : float
    - y : bool
}
struct AlignOfY {
    - x : float
    - y : bool
    - z : float
    - w : bool
}
struct AlignOfZ {
    - x : float4
    - y : bool
}
struct AlignOfW {
    - x : float4
    - y : bool
    - z : float4x4
    - w : bool
}
struct BoolLong {
    - x : bool
    - y : long
}
struct BoolPtr {
    - x : bool
    <<unsafe>> - y : void*
}
CollectionsTestCommonBase <|-- UnsafeUtilityTests
UnsafeUtilityTests +-- DummyVec
UnsafeUtilityTests +-- AlignOfX
UnsafeUtilityTests +-- AlignOfY
UnsafeUtilityTests +-- AlignOfZ
UnsafeUtilityTests +-- AlignOfW
UnsafeUtilityTests +-- BoolLong
UnsafeUtilityTests +-- BoolPtr
@enduml
