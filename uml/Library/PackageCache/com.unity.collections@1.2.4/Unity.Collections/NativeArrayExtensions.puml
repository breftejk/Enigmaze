@startuml
class NativeArrayExtensions <<unsafe>> <<static>> {
    + {static} Contains(array:NativeArray<T>, value:U) : bool
    + {static} IndexOf(array:NativeArray<T>, value:U) : int
    + {static} Contains(array:NativeArray<T>.ReadOnly, value:U) : bool
    + {static} IndexOf(array:NativeArray<T>.ReadOnly, value:U) : int
    + {static} Contains(list:NativeList<T>, value:U) : bool
    + {static} IndexOf(list:NativeList<T>, value:U) : int
    + {static} Contains(ptr:void*, length:int, value:U) : bool
    + {static} IndexOf(ptr:void*, length:int, value:U) : int
    + {static} Reinterpret(array:NativeArray<T>) : NativeArray<U>
    + {static} ArraysEqual(array:NativeArray<T>, other:NativeArray<T>) : bool
    + {static} ArraysEqual(array:NativeList<T>, other:NativeArray<T>) : bool
    {static} - CheckReinterpretSize(array:NativeArray<T>) : void
    <<internal>> {static} Initialize(array:NativeArray<T>, length:int, allocator:AllocatorManager.AllocatorHandle, options:NativeArrayOptions) : void
    <<internal>> {static} Initialize(array:NativeArray<T>, length:int, allocator:U, options:NativeArrayOptions) : void
}
struct "NativeArrayStaticId`1"<T> {
    <<internal>> {static} <<readonly>> s_staticSafetyId : SharedStatic<int>
}
NativeArrayExtensions +-- "NativeArrayStaticId`1"
@enduml
