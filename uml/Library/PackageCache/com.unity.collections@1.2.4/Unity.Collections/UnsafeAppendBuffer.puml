@startuml
struct UnsafeAppendBuffer {
    + Ptr : byte*
    + Length : int
    + Capacity : int
    + Allocator : AllocatorManager.AllocatorHandle
    + <<readonly>> Alignment : int
    + UnsafeAppendBuffer(initialCapacity:int, alignment:int, allocator:AllocatorManager.AllocatorHandle)
    + UnsafeAppendBuffer(ptr:void*, length:int)
    + IsEmpty : bool <<get>>
    + IsCreated : bool <<get>>
    + Dispose() : void
    + Dispose(inputDeps:JobHandle) : JobHandle
    + Reset() : void
    + SetCapacity(capacity:int) : void
    + ResizeUninitialized(length:int) : void
    + Add(value:T) : void
    + Add(ptr:void*, structSize:int) : void
    + AddArray(ptr:void*, length:int) : void
    + Add(value:NativeArray<T>) : void
    + Add(value:string) : void
    + Pop() : T
    + Pop(ptr:void*, structSize:int) : void
    + ToBytes() : byte[]
    + AsReader() : Reader
    {static} - CheckAlignment(alignment:int) : void
}
struct Reader {
    + <<readonly>> Ptr : byte*
    + <<readonly>> Size : int
    + Offset : int
    + Reader(buffer:UnsafeAppendBuffer)
    + Reader(ptr:void*, length:int)
    + EndOfBuffer : bool <<get>>
    + ReadNext(value:T) : void
    + ReadNext() : T
    + ReadNext(structSize:int) : void*
    + ReadNext(value:NativeArray<T>, allocator:AllocatorManager.AllocatorHandle) : void
    + ReadNextArray(length:int) : void*
    + ReadNext(value:string) : void
    - CheckBounds(structSize:int) : void
}
INativeDisposable <|-- UnsafeAppendBuffer
UnsafeAppendBuffer +-- Reader
@enduml
