@startuml
struct "NativeMultiHashMapIterator`1"<TKey> {
    <<internal>> key : TKey
    <<internal>> NextEntryIndex : int
    <<internal>> EntryIndex : int
    + GetEntryIndex() : int
}
struct "NativeMultiHashMap`2"<TKey,TValue> {
    <<internal>> m_MultiHashMapData : UnsafeMultiHashMap<TKey, TValue>
    + NativeMultiHashMap(capacity:int, allocator:AllocatorManager.AllocatorHandle)
    <<internal>> Initialize(capacity:int, allocator:U, disposeSentinelStackDepth:int) : void
    - NativeMultiHashMap(capacity:int, allocator:AllocatorManager.AllocatorHandle, disposeSentinelStackDepth:int)
    + IsEmpty : bool <<get>>
    + Count() : int
    + Capacity : int <<get>> <<set>>
    + Clear() : void
    + Add(key:TKey, item:TValue) : void
    + Remove(key:TKey) : int
    + Remove(it:NativeMultiHashMapIterator<TKey>) : void
    + TryGetFirstValue(key:TKey, item:TValue, it:NativeMultiHashMapIterator<TKey>) : bool
    + TryGetNextValue(item:TValue, it:NativeMultiHashMapIterator<TKey>) : bool
    + ContainsKey(key:TKey) : bool
    + CountValuesForKey(key:TKey) : int
    + SetValue(item:TValue, it:NativeMultiHashMapIterator<TKey>) : bool
    + IsCreated : bool <<get>>
    + Dispose() : void
    + Dispose(inputDeps:JobHandle) : JobHandle
    + GetKeyArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<TKey>
    + GetValueArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<TValue>
    + GetKeyValueArrays(allocator:AllocatorManager.AllocatorHandle) : NativeKeyValueArrays<TKey, TValue>
    + AsParallelWriter() : ParallelWriter
    + GetValuesForKey(key:TKey) : Enumerator
    + GetEnumerator() : KeyValueEnumerator
    - GetEnumerator() : IEnumerator<KeyValue<TKey, TValue>>
    - GetEnumerator() : IEnumerator
    - CheckRead() : void
    - CheckWrite() : void
}
class "NativeMultiHashMapDebuggerTypeProxy`2"<TKey,TValue> <<sealed>> {
    - m_Target : NativeMultiHashMap<TKey, TValue>
    + NativeMultiHashMapDebuggerTypeProxy(target:NativeMultiHashMap<TKey, TValue>)
    + Items : List<ListPair<TKey, List<TValue>>> <<get>>
}
class NativeMultiHashMapExtensions <<unsafe>> <<static>> {
    <<internal>> {static} Initialize(nativeMultiHashMap:NativeMultiHashMap<TKey, TValue>, capacity:int, allocator:U, disposeSentinelStackDepth:int) : void
}
struct ParallelWriter {
    <<internal>> m_Writer : UnsafeMultiHashMap<TKey, TValue>.ParallelWriter
    + m_ThreadIndex : int <<get>>
    + Capacity : int <<get>>
    + Add(key:TKey, item:TValue) : void
}
struct Enumerator {
    <<internal>> hashmap : NativeMultiHashMap<TKey, TValue>
    <<internal>> key : TKey
    <<internal>> isFirst : bool
    - value : TValue
    - iterator : NativeMultiHashMapIterator<TKey>
    + Dispose() : void
    + MoveNext() : bool
    + Reset() : void
    + Current : TValue <<get>>
    - Current : object <<get>>
    + GetEnumerator() : Enumerator
}
struct KeyValueEnumerator {
    <<internal>> m_Enumerator : UnsafeHashMapDataEnumerator
    + Dispose() : void
    + <<unsafe>> MoveNext() : bool
    + Reset() : void
    + Current : KeyValue<TKey, TValue> <<get>>
    - Current : object <<get>>
}
INativeDisposable <|-- "NativeMultiHashMap`2"
"IEnumerable`1" "<KeyValue<TKey, TValue>>" <|-- "NativeMultiHashMap`2"
"NativeMultiHashMap`2" +-- ParallelWriter
"NativeMultiHashMap`2" +-- Enumerator
"IEnumerator`1" "<TValue>" <|-- Enumerator
"NativeMultiHashMap`2" +-- KeyValueEnumerator
"IEnumerator`1" "<KeyValue<TKey, TValue>>" <|-- KeyValueEnumerator
@enduml
