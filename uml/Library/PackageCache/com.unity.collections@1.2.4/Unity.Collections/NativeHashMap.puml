@startuml
struct "NativeKeyValueArrays`2"<TKey,TValue> {
    + Keys : NativeArray<TKey>
    + Values : NativeArray<TValue>
    + Length : int <<get>>
    + NativeKeyValueArrays(length:int, allocator:AllocatorManager.AllocatorHandle, options:NativeArrayOptions)
    + Dispose() : void
    + Dispose(inputDeps:JobHandle) : JobHandle
}
struct "NativeHashMap`2"<TKey,TValue> {
    <<internal>> m_HashMapData : UnsafeHashMap<TKey, TValue>
    + NativeHashMap(capacity:int, allocator:AllocatorManager.AllocatorHandle)
    - NativeHashMap(capacity:int, allocator:AllocatorManager.AllocatorHandle, disposeSentinelStackDepth:int)
    + IsEmpty : bool <<get>>
    + Count() : int
    + Capacity : int <<get>> <<set>>
    + Clear() : void
    + TryAdd(key:TKey, item:TValue) : bool
    + Add(key:TKey, item:TValue) : void
    + Remove(key:TKey) : bool
    + TryGetValue(key:TKey, item:TValue) : bool
    + ContainsKey(key:TKey) : bool
    + IsCreated : bool <<get>>
    + Dispose() : void
    + Dispose(inputDeps:JobHandle) : JobHandle
    + GetKeyArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<TKey>
    + GetValueArray(allocator:AllocatorManager.AllocatorHandle) : NativeArray<TValue>
    + GetKeyValueArrays(allocator:AllocatorManager.AllocatorHandle) : NativeKeyValueArrays<TKey, TValue>
    + AsParallelWriter() : ParallelWriter
    + GetEnumerator() : Enumerator
    - GetEnumerator() : IEnumerator<KeyValue<TKey, TValue>>
    - GetEnumerator() : IEnumerator
    - CheckRead() : void
    - CheckWrite() : void
    - ThrowKeyNotPresent(key:TKey) : void
    - ThrowKeyAlreadyAdded(key:TKey) : void
}
class "NativeHashMapDebuggerTypeProxy`2"<TKey,TValue> <<sealed>> {
    - m_Target : UnsafeHashMap<TKey, TValue>
    + NativeHashMapDebuggerTypeProxy(target:NativeHashMap<TKey, TValue>)
    + Items : List<Pair<TKey, TValue>> <<get>>
}
struct ParallelWriter {
    <<internal>> m_Writer : UnsafeHashMap<TKey, TValue>.ParallelWriter
    + m_ThreadIndex : int <<get>>
    + Capacity : int <<get>>
    + TryAdd(key:TKey, item:TValue) : bool
}
struct Enumerator {
    <<internal>> m_Enumerator : UnsafeHashMapDataEnumerator
    + Dispose() : void
    + MoveNext() : bool
    + Reset() : void
    + Current : KeyValue<TKey, TValue> <<get>>
    - Current : object <<get>>
}
INativeDisposable <|-- "NativeKeyValueArrays`2"
INativeDisposable <|-- "NativeHashMap`2"
"IEnumerable`1" "<KeyValue<TKey, TValue>>" <|-- "NativeHashMap`2"
"NativeHashMap`2" +-- ParallelWriter
"NativeHashMap`2" +-- Enumerator
"IEnumerator`1" "<KeyValue<TKey, TValue>>" <|-- Enumerator
@enduml
