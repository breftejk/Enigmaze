@startuml
interface IWindowState {
    masterSequence : ISequenceState <<get>>
    editSequence : ISequenceState <<get>>
    allSequences : IEnumerable<ISequenceState> <<get>>
    playRange : PlayRange <<get>> <<set>>
    SetCurrentSequence(timelineAsset:TimelineAsset, director:PlayableDirector, hostClip:TimelineClip) : void
    PopSequencesUntilCount(count:int) : void
    GetSubSequences() : IEnumerable<SequenceContext>
    SetPlaying(start:bool) : void
}
class WindowState {
    <<const>> - k_TimeCodeTextFieldId : int = 3790
    <<readonly>> - m_Window : TimelineWindow
    - m_Recording : bool
    <<readonly>> - m_SpacePartitioner : SpacePartitioner
    <<readonly>> - m_HeaderSpacePartitioner : SpacePartitioner
    <<readonly>> - m_CaptureSession : List<Manipulator>
    - m_DirtyStamp : int
    - m_BindingAreaWidth : float
    - m_MustRebuildGraph : bool
    - m_LastTime : float
    <<readonly>> - m_PropertyCollector : PropertyCollector
    {static} - s_PreviewDriver : AnimationModeDriver
    - m_PreviewedAnimators : PreviewedBindings<Animator>
    - m_PreviewedComponents : List<Component>
    - previewedComponents : IEnumerable<IAnimationWindowPreview> <<get>>
    + {static} kTimeEpsilon : double <<get>>
    + {static} <<readonly>> kMaxShownTime : float
    {static} <<readonly>> - k_NullSequenceState : ISequenceState
    - m_ArmedTracks : Dictionary<TrackAsset, TrackAsset>
    - m_Preferences : TimelineWindow.TimelineWindowPreferences
    - m_OnStartFrameUpdates : List<PendingUpdateDelegate>
    - m_OnEndFrameUpdates : List<PendingUpdateDelegate>
    <<readonly>> - m_SequenceHierarchy : SequenceHierarchy
    +  <<event>> windowOnGuiStarted : Action<WindowState, Event> 
    +  <<event>> OnPlayStateChange : Action<bool> 
    +  <<event>> OnDirtyStampChange : System.Action 
    +  <<event>> OnRebuildGraphChange : System.Action 
    +  <<event>> OnTimeChange : System.Action 
    +  <<event>> OnRecordingChange : System.Action 
    +  <<event>> OnBeforeSequenceChange : System.Action 
    +  <<event>> OnAfterSequenceChange : System.Action 
    + WindowState(w:TimelineWindow, hierarchy:SequenceHierarchy)
    + {static} previewDriver : AnimationModeDriver <<get>>
    + editorWindow : EditorWindow <<get>>
    + editSequence : ISequenceState <<get>>
    + masterSequence : ISequenceState <<get>>
    + referenceSequence : ISequenceState <<get>>
    + allSequences : IEnumerable<ISequenceState> <<get>>
    + rebuildGraph : bool <<get>> <<set>>
    + mouseDragLag : float <<get>> <<set>>
    + spacePartitioner : SpacePartitioner <<get>>
    + headerSpacePartitioner : SpacePartitioner <<get>>
    + captured : List<Manipulator> <<get>>
    + AddCaptured(manipulator:Manipulator) : void
    + RemoveCaptured(manipulator:Manipulator) : void
    + isJogging : bool <<get>> <<set>>
    + viewStateHash : int <<get>>
    + bindingAreaWidth : float <<get>> <<set>>
    + sequencerHeaderWidth : float <<get>> <<set>>
    + mainAreaWidth : float <<get>> <<set>>
    + trackScale : float <<get>> <<set>>
    + dirtyStamp : int <<get>>
    + showQuadTree : bool <<get>> <<set>>
    + canRecord : bool <<get>>
    + recording : bool <<get>> <<set>>
    + previewMode : bool <<get>> <<set>>
    + playing : bool <<get>>
    + playbackSpeed : float <<get>> <<set>>
    + frameSnap : bool <<get>> <<set>>
    + edgeSnaps : bool <<get>> <<set>>
    + muteAudioScrubbing : bool <<get>> <<set>>
    + timeReferenceMode : TimeReferenceMode <<get>> <<set>>
    + timeFormat : TimeFormat <<get>> <<set>>
    + showAudioWaveform : bool <<get>> <<set>>
    + playRange : PlayRange <<get>> <<set>>
    + showMarkerHeader : bool <<get>> <<set>>
    + editType : EditMode.EditType <<get>> <<set>>
    + autoScrollMode : PlaybackScrollMode <<get>> <<set>>
    + previewedDirectors : List<PlayableDirector> <<get>>
    + OnDestroy() : void
    + OnSceneSaved() : void
    + SetCurrentSequence(timelineAsset:TimelineAsset, director:PlayableDirector, hostClip:TimelineClip) : void
    + PopSequencesUntilCount(count:int) : void
    + GetCurrentSequencePath() : SequencePath
    + SetCurrentSequencePath(path:SequencePath, forceRebuild:bool) : void
    + GetAllSequences() : IEnumerable<ISequenceState>
    + GetSubSequences() : IEnumerable<SequenceContext>
    + Reset() : void
    + GetSnappedTimeAtMousePosition(mousePos:Vector2) : double
    {static} - SyncNotifyValue(oldValue:T, newValue:T, changeStateCallback:System.Action) : void
    + analytics : TimelineWindowAnalytics
    + SetTimeAreaTransform(newTranslation:Vector2, newScale:Vector2) : void
    + SetTimeAreaShownRange(min:float, max:float) : void
    <<internal>> TimeAreaChanged() : void
    + ResetPreviewMode() : void
    + TimeIsInRange(value:float) : bool
    + RangeIsVisible(range:Range) : bool
    + EnsurePlayHeadIsVisible() : void
    + SetPlayHeadToMiddle() : void
    <<internal>> UpdateLastFrameTime() : void
    + timeAreaShownRange : Vector2 <<get>> <<set>>
    + timeAreaTranslation : Vector2 <<get>>
    + timeAreaScale : Vector2 <<get>>
    + timeAreaRect : Rect <<get>>
    + windowHeight : float <<get>>
    + playRangeEnabled : bool <<get>> <<set>>
    + ignorePreview : bool <<get>>
    + GetWindow() : TimelineWindow
    + Play() : void
    + Pause() : void
    + SetPlaying(start:bool) : void
    + Stop() : void
    - InvokePlayStateChangeCallback(isPlaying:bool) : void
    + RebuildPlayableGraph() : void
    + Evaluate() : void
    + EvaluateImmediate() : void
    + Refresh() : void
    + UpdateViewStateHash() : void
    + IsEditingASubTimeline() : bool
    + IsEditingAnEmptyTimeline() : bool
    + IsEditingAPrefabAsset() : bool
    + IsCurrentEditingASequencerTextField() : bool
    + TimeToTimeAreaPixel(t:double) : float
    + TimeToScreenSpacePixel(time:double) : float
    + TimeToPixel(time:double) : float
    + PixelToTime(pixel:float) : float
    + PixelDeltaToDeltaTime(p:float) : float
    + TimeAreaPixelToTime(pixel:float) : float
    + ScreenSpacePixelToTimeAreaTime(p:float) : float
    + TrackSpacePixelToTimeAreaTime(p:float) : float
    + OffsetTimeArea(pixels:int) : void
    + GetSceneReference(asset:TrackAsset) : GameObject
    + CalculateRowRects() : void
    + ArmForRecord(track:TrackAsset) : void
    + UnarmForRecord(track:TrackAsset) : void
    + UpdateRecordingState() : void
    + IsTrackRecordable(track:TrackAsset) : bool
    + IsArmedForRecord(track:TrackAsset) : bool
    + GetArmedTrack(track:TrackAsset) : TrackAsset
    - CheckRecordingState() : void
    - OnCurrentDirectorWillChange() : void
    + GatherProperties(director:PlayableDirector) : void
    - OnStartPreview(director:PlayableDirector) : void
    <<internal>> AllowRecordingPrefabPropertyOverridesFor(componentOrGameObject:Object) : bool
    - OnStopPreview() : void
    <<internal>> ProcessStartFramePendingUpdates() : void
    <<internal>> ProcessEndFramePendingUpdates() : void
    + AddStartFrameDelegate(updateDelegate:PendingUpdateDelegate) : void
    + AddEndFrameDelegate(updateDelegate:PendingUpdateDelegate) : void
    <<internal>> InvokeWindowOnGuiStarted(evt:Event) : void
    + UpdateRootPlayableDuration(duration:double) : void
    + InvokeTimeChangeCallback() : void
    - ValidatePlayRange(range:PlayRange, sequenceState:ISequenceState) : PlayRange
    - EnsureWindowTimeConsistency() : void
    - SynchronizeSequencesAfterPlayback() : void
    {static} - SynchronizeViewModelTime(state:ISequenceState) : void
    {static} - ForceTimeOnDirector(director:PlayableDirector) : void
    + IsPlayableGraphDone() : bool
}
IWindowState <|-- WindowState
@enduml
