@startuml
abstract class TrackAsset <<partial>> {
    - {static} s_BuildData : TransientBuildData
    <<internal>> <<const>> kDefaultCurvesName : string = "Track Parameters"
    <<internal>> {static}  <<event>> OnClipPlayableCreate : Action<TimelineClip, GameObject, Playable> 
    <<internal>> {static}  <<event>> OnTrackAnimationPlayableCreate : Action<TrackAsset, GameObject, Playable> 
    - m_Locked : bool
    - m_Muted : bool
    - m_CustomPlayableFullTypename : string
    - m_Curves : AnimationClip
    - m_Parent : PlayableAsset
    - m_Children : List<ScriptableObject>
    - m_ItemsHash : int
    - m_ClipsCache : TimelineClip[]
    - m_Start : DiscreteTime
    - m_End : DiscreteTime
    - m_CacheSorted : bool
    - m_SupportsNotifications : bool?
    {static} - s_EmptyCache : TrackAsset[]
    - m_ChildTrackCache : IEnumerable<TrackAsset>
    {static} - s_TrackBindingTypeAttributeCache : Dictionary<Type, TrackBindingTypeAttribute>
    # <<internal>> m_Clips : List<TimelineClip>
    - m_Markers : MarkerList
    + start : double <<get>>
    + end : double <<get>>
    + <<sealed>> <<override>> duration : double <<get>>
    + muted : bool <<get>> <<set>>
    + mutedInHierarchy : bool <<get>>
    + timelineAsset : TimelineAsset <<get>>
    + parent : PlayableAsset <<get>> <<internal set>>
    + GetClips() : IEnumerable<TimelineClip>
    <<internal>> clips : TimelineClip[] <<get>>
    + <<virtual>> isEmpty : bool <<get>>
    + hasClips : bool <<get>>
    + hasCurves : bool <<get>>
    + isSubTrack : bool <<get>>
    + <<override>> outputs : IEnumerable<PlayableBinding> <<get>>
    + GetChildTracks() : IEnumerable<TrackAsset>
    <<internal>> customPlayableTypename : string <<get>> <<set>>
    + curves : AnimationClip <<get>> <<internal set>>
    - defaultCurvesName : string <<get>>
    - asset : Object <<get>>
    - assetOwner : Object <<get>>
    - targetTrack : TrackAsset <<get>>
    <<internal>> subTracksObjects : List<ScriptableObject> <<get>>
    + locked : bool <<get>> <<set>>
    + lockedInHierarchy : bool <<get>>
    + supportsNotifications : bool <<get>>
    - __internalAwake() : void
    + CreateCurves(curvesClipName:string) : void
    + <<virtual>> CreateTrackMixer(graph:PlayableGraph, go:GameObject, inputCount:int) : Playable
    + <<sealed>> <<override>> CreatePlayable(graph:PlayableGraph, go:GameObject) : Playable
    + CreateDefaultClip() : TimelineClip
    + CreateClip() : TimelineClip
    + DeleteClip(clip:TimelineClip) : bool
    + CreateMarker(type:Type, time:double) : IMarker
    + CreateMarker(time:double) : T
    + DeleteMarker(marker:IMarker) : bool
    + GetMarkers() : IEnumerable<IMarker>
    + GetMarkerCount() : int
    + GetMarker(idx:int) : IMarker
    <<internal>> CreateClip(requestedType:System.Type) : TimelineClip
    <<internal>> CreateAndAddNewClipOfType(requestedType:Type) : TimelineClip
    <<internal>> CreateClipOfType(requestedType:Type) : TimelineClip
    <<internal>> CreateClipFromPlayableAsset(asset:IPlayableAsset) : TimelineClip
    - CreateClipFromAsset(playableAsset:ScriptableObject) : TimelineClip
    <<internal>> GetMarkersRaw() : IEnumerable<ScriptableObject>
    <<internal>> ClearMarkers() : void
    <<internal>> AddMarker(e:ScriptableObject) : void
    <<internal>> DeleteMarkerRaw(marker:ScriptableObject) : bool
    - GetTimeRangeHash() : int
    <<internal>> AddClip(newClip:TimelineClip) : void
    - CreateNotificationsPlayable(graph:PlayableGraph, mixerPlayable:Playable, go:GameObject, timelinePlayable:Playable) : Playable
    <<internal>> CreatePlayableGraph(graph:PlayableGraph, go:GameObject, tree:IntervalTree<RuntimeElement>, timelinePlayable:Playable) : Playable
    <<internal>> <<virtual>> CompileClips(graph:PlayableGraph, go:GameObject, timelineClips:IList<TimelineClip>, tree:IntervalTree<RuntimeElement>) : Playable
    - GatherCompilableTracks(tracks:IList<TrackAsset>) : void
    - GatherNotifications(markers:List<IMarker>) : void
    <<internal>> <<virtual>> CreateMixerPlayableGraph(graph:PlayableGraph, go:GameObject, tree:IntervalTree<RuntimeElement>) : Playable
    <<internal>> ConfigureTrackAnimation(tree:IntervalTree<RuntimeElement>, go:GameObject, blend:Playable) : void
    <<internal>> SortClips() : void
    <<internal>> ClearClipsInternal() : void
    <<internal>> ClearSubTracksInternal() : void
    <<internal>> OnClipMove() : void
    <<internal>> CreateNewClipContainerInternal() : TimelineClip
    <<internal>> AddChild(child:TrackAsset) : void
    <<internal>> MoveLastTrackBefore(asset:TrackAsset) : void
    <<internal>> RemoveSubTrack(child:TrackAsset) : bool
    <<internal>> RemoveClip(clip:TimelineClip) : void
    <<internal>> <<virtual>> GetEvaluationTime(outStart:double, outDuration:double) : void
    <<internal>> <<virtual>> GetSequenceTime(outStart:double, outDuration:double) : void
    + <<virtual>> GatherProperties(director:PlayableDirector, driver:IPropertyCollector) : void
    <<internal>> GetGameObjectBinding(director:PlayableDirector) : GameObject
    <<internal>> ValidateClipType(clipType:Type) : bool
    # <<virtual>> OnCreateClip(clip:TimelineClip) : void
    - UpdateDuration() : void
    # <<internal>> <<virtual>> CalculateItemsHash() : int
    # <<virtual>> CreatePlayable(graph:PlayableGraph, gameObject:GameObject, clip:TimelineClip) : Playable
    <<internal>> Invalidate() : void
    <<internal>> GetNotificationDuration() : double
    <<internal>> <<virtual>> CanCompileClips() : bool
    + <<virtual>> CanCreateTrackMixer() : bool
    <<internal>> IsCompilable() : bool
    - UpdateChildTrackCache() : void
    <<internal>> <<virtual>> Hash() : int
    - GetClipsHash() : int
    # {static} GetAnimationClipHash(clip:AnimationClip) : int
    - HasNotifications() : bool
    - CanCompileNotifications() : bool
    - CanCreateMixerRecursive() : bool
}
struct TransientBuildData {
    + trackList : List<TrackAsset>
    + clipList : List<TimelineClip>
    + markerList : List<IMarker>
    + {static} Create() : TransientBuildData
    + Clear() : void
}
PlayableAsset <|-- TrackAsset
IPropertyPreview <|-- TrackAsset
ICurvesOwner <|-- TrackAsset
TrackAsset +-- TransientBuildData
@enduml
