@startuml
class CinemachineCollider {
    + m_CollideAgainst : LayerMask = 1
    + m_IgnoreTag : string
    + m_TransparentLayers : LayerMask = 0
    + m_MinimumDistanceFromTarget : float = 0.1f
    + m_AvoidObstacles : bool = true
    + m_DistanceLimit : float
    + m_MinimumOcclusionTime : float
    + m_CameraRadius : float = 0.1f
    + m_Strategy : ResolutionStrategy
    + m_MaximumEffort : int = 4
    + m_SmoothingTime : float
    + m_Damping : float
    + m_DampingWhenOccluded : float
    + m_OptimalTargetDistance : float
    + IsTargetObscured(vcam:ICinemachineCamera) : bool
    + CameraWasDisplaced(vcam:ICinemachineCamera) : bool
    + GetCameraDisplacementDistance(vcam:ICinemachineCamera) : float
    - OnValidate() : void
    # <<override>> OnDestroy() : void
    <<const>> - k_PrecisionSlush : float = 0.001f
    + DebugPaths : List<List<Vector3>> <<get>>
    + <<override>> GetMaxDampTime() : float
    + <<override>> OnTargetObjectWarped(target:Transform, positionDelta:Vector3) : void
    # <<override>> PostPipelineStageCallback(vcam:CinemachineVirtualCameraBase, stage:CinemachineCore.Stage, state:CameraState, deltaTime:float) : void
    - PreserveLineOfSight(state:CameraState, extra:VcamExtraState) : Vector3
    - PullCameraInFrontOfNearestObstacle(cameraPos:Vector3, lookAtPos:Vector3, layerMask:int, hitInfo:RaycastHit) : Vector3
    - PushCameraBack(currentPos:Vector3, pushDir:Vector3, obstacle:RaycastHit, lookAtPos:Vector3, startPlane:Plane, targetDistance:float, iterations:int, extra:VcamExtraState) : Vector3
    - m_CornerBuffer : RaycastHit[]
    - GetWalkingDirection(pos:Vector3, pushDir:Vector3, obstacle:RaycastHit, outDir:Vector3) : bool
    <<const>> - k_AngleThreshold : float = 0.1f
    - GetPushBackDistance(ray:Ray, startPlane:Plane, targetDistance:float, lookAtPos:Vector3) : float
    {static} - ClampRayToBounds(ray:Ray, distance:float, bounds:Bounds) : float
    {static} - s_ColliderBuffer : Collider[]
    - RespectCameraRadius(cameraPos:Vector3, lookAtPos:Vector3) : Vector3
    - CheckForTargetObstructions(state:CameraState) : bool
    {static} - IsTargetOffscreen(state:CameraState) : bool
}
enum ResolutionStrategy {
    PullCameraForward,
    PreserveCameraHeight,
    PreserveCameraDistance,
}
class VcamExtraState {
    + previousDisplacement : Vector3
    + previousCameraOffset : Vector3
    + previousCameraPosition : Vector3
    + previousDampTime : float
    + targetObscured : bool
    + occlusionStartTime : float
    + debugResolutionPath : List<Vector3>
    + AddPointToDebugPath(p:Vector3) : void
    - m_SmoothedDistance : float
    - m_SmoothedTime : float
    + ApplyDistanceSmoothing(distance:float, smoothingTime:float) : float
    + UpdateDistanceSmoothing(distance:float) : void
    + ResetDistanceSmoothing(smoothingTime:float) : void
}
CinemachineExtension <|-- CinemachineCollider
CinemachineCollider +-- ResolutionStrategy
CinemachineCollider +-- VcamExtraState
@enduml
