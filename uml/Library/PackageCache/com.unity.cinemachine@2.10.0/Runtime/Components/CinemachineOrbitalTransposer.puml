@startuml
class CinemachineOrbitalTransposer {
    + m_Heading : Heading
    + m_RecenterToTargetHeading : AxisState.Recentering
    + m_XAxis : AxisState
    - m_LegacyRadius : float
    - m_LegacyHeightOffset : float
    - m_LegacyHeadingBias : float
    # <<override>> OnValidate() : void
    + m_HeadingIsSlave : bool = false
    <<internal>> HeadingUpdater : UpdateHeadingDelegate
    + UpdateHeading(deltaTime:float, up:Vector3, axis:AxisState) : float
    + UpdateHeading(deltaTime:float, up:Vector3, axis:AxisState, recentering:AxisState.Recentering, isLive:bool) : float
    - OnEnable() : void
    + UpdateInputAxisProvider() : void
    - m_LastTargetPosition : Vector3
    - mHeadingTracker : HeadingTracker
    - m_TargetRigidBody : Rigidbody = null
    - m_PreviousTarget : Transform
    - m_LastCameraPosition : Vector3
    + <<override>> OnTargetObjectWarped(target:Transform, positionDelta:Vector3) : void
    + <<override>> ForceCameraPosition(pos:Vector3, rot:Quaternion) : void
    + <<override>> OnTransitionFromCamera(fromCam:ICinemachineCamera, worldUp:Vector3, deltaTime:float, transitionParams:CinemachineVirtualCameraBase.TransitionParams) : bool
    + GetAxisClosestValue(cameraPos:Vector3, up:Vector3) : float
    - m_LastHeading : float
    + <<override>> MutateCameraState(curState:CameraState, deltaTime:float) : void
    + <<override>> GetTargetCameraPosition(worldUp:Vector3) : Vector3
    + <<override>> RequiresUserInput : bool <<get>>
    - GetTargetHeading(currentHeading:float, targetOrientation:Quaternion) : float
}
struct Heading {
    + m_Definition : HeadingDefinition
    + m_VelocityFilterStrength : int
    + m_Bias : float
    + Heading(def:HeadingDefinition, filterStrength:int, bias:float)
}
enum HeadingDefinition {
    PositionDelta,
    Velocity,
    TargetForward,
    WorldForward,
}
CinemachineTransposer <|-- CinemachineOrbitalTransposer
CinemachineOrbitalTransposer +-- Heading
Heading +-- HeadingDefinition
@enduml
