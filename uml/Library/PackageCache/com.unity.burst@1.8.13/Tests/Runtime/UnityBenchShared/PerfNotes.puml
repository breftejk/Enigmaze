@startuml
class PerfNotes <<static>> {
    + {static} BenchArraySize : int
}
struct PartialWrite {
    + a : NativeArray<int>
    + b : NativeArray<int>
    + Execute() : void
    + Dispose() : void
}
struct PartialWriteWorkaround {
    + a : NativeArray<int>
    + b : NativeArray<int>
    + Execute() : void
    + Dispose() : void
}
struct IntToFloatPenalty {
    + b : NativeArray<float>
    + Execute() : void
    + Dispose() : void
}
struct DivisionByScalar {
    - divisor : float
    + a : NativeArray<float>
    + b : NativeArray<float>
    + Execute() : void
    + Dispose() : void
}
struct SquareRoot {
    + a : NativeArray<float>
    + b : NativeArray<float>
    + Execute() : void
    + Dispose() : void
}
struct SquareRootRecip {
    + a : NativeArray<float>
    + b : NativeArray<float>
    + Execute() : void
    + Dispose() : void
}
struct RedundantStore {
    + sum : int
    + a : NativeArray<int>
    + Execute() : void
    + Dispose() : void
}
struct RedundantStoreWorkaround {
    + sum : int
    + a : NativeArray<int>
    + Execute() : void
    + Dispose() : void
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
struct Provider {
    + Value : object <<get>>
}
IJob <|-- PartialWrite
IDisposable <|-- PartialWrite
IJob <|-- PartialWriteWorkaround
IDisposable <|-- PartialWriteWorkaround
IJob <|-- IntToFloatPenalty
IDisposable <|-- IntToFloatPenalty
IJob <|-- DivisionByScalar
IDisposable <|-- DivisionByScalar
IJob <|-- SquareRoot
IDisposable <|-- SquareRoot
IJob <|-- SquareRootRecip
IDisposable <|-- SquareRootRecip
IJob <|-- RedundantStore
IDisposable <|-- RedundantStore
IJob <|-- RedundantStoreWorkaround
IDisposable <|-- RedundantStoreWorkaround
PartialWrite +-- Provider
IArgumentProvider <|-- Provider
PartialWriteWorkaround +-- Provider
IArgumentProvider <|-- Provider
IntToFloatPenalty +-- Provider
IArgumentProvider <|-- Provider
DivisionByScalar +-- Provider
IArgumentProvider <|-- Provider
SquareRoot +-- Provider
IArgumentProvider <|-- Provider
SquareRootRecip +-- Provider
IArgumentProvider <|-- Provider
RedundantStore +-- Provider
IArgumentProvider <|-- Provider
RedundantStoreWorkaround +-- Provider
IArgumentProvider <|-- Provider
@enduml
