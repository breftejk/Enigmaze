@startuml
class PlaymodeTest {
    + CheckBurstJobEnabledDisabled() : IEnumerator
    - CheckBurstJobEnabled() : IEnumerable
    - CheckBurstJobDisabled() : IEnumerable
    + NoSafetyCheckExceptionWarningInEditor() : void
    - {static} <<readonly>> SharedStaticOneType : SharedStatic<int>
    - {static} <<readonly>> SharedStaticTwoTypes0 : SharedStatic<double>
    - {static} <<readonly>> SharedStaticTwoTypes1 : SharedStatic<double>
    - {static} <<readonly>> SharedStaticWithSystemTypes0 : SharedStatic<int>
    - {static} <<readonly>> SharedStaticWithSystemTypes1 : SharedStatic<int>
    - {static} <<readonly>> SharedStaticWithSystemTypes2 : SharedStatic<int>
    - {static} <<readonly>> SharedStaticWithSystemTypes3 : SharedStatic<int>
    + <<unsafe>> SharedStaticPostProcessedTests() : void
    + TestDirectCalls() : void
    + TestDirectCallInNamespacedClass() : void
    + TestFunctionPointers() : void
    + TestGenericClassConcreteMethodFunctionPointer() : void
}
class C <<static>> {
    + {static} A() : int
    - {static} B() : int
    - {static} DiscardedMethod(x:int) : void
}
struct ThrowingJob {
    + I : int
    + Execute() : void
}
struct MyKey {
}
struct "SomeGenericStruct`1"<T> {
}
struct "MyGenericContainingStruct`1"<T> {
    + {static} <<readonly>> Data0 : SharedStatic<int>
    + {static} <<readonly>> Data1 : SharedStatic<int>
    + {static} <<readonly>> Data2 : SharedStatic<int>
}
struct SomeFunctionPointers {
    - {static} MessWith(a:int) : void
    + {static} A(a:int, b:int) : int
    + {static} B(a:int, b:int) : int
    + {static} C(a:int, b:int) : int
    + {static} D(a:int, b:int) : int
}
class "GenericClass`1"<T> <<static>> {
    + {static} ConcreteMethod() : int
}
struct MySubKey0 {
}
struct MySubKey1 {
}
PlaymodeTest +-- ThrowingJob
IJob <|-- ThrowingJob
PlaymodeTest +-- MyKey
PlaymodeTest +-- "SomeGenericStruct`1"
PlaymodeTest +-- "MyGenericContainingStruct`1"
PlaymodeTest +-- SomeFunctionPointers
PlaymodeTest +-- "GenericClass`1"
MyKey +-- MySubKey0
MyKey +-- MySubKey1
@enduml
