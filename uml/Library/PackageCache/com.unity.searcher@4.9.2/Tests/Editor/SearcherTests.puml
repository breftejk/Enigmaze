@startuml
abstract class SearcherTestsBase {
    # m_Searcher : Searcher
    + Init() : void
    # {abstract} Create(bookItems:List<SearcherItem>) : SearcherDatabaseBase
    + Cleanup() : void
    # SingleTermSearch_Implementation(term:string, expectedResultCount:int) : void
    # MultipleTermsSearch_Implementation(term:string, expectedResultCount:int) : void
}
class SearcherTests {
    # <<override>> Create(bookItems:List<SearcherItem>) : SearcherDatabaseBase
    + {static} SingleTermCases() : IEnumerable<object[]>
    + {static} MultipleTermCases() : IEnumerable<object[]>
    + SingleTermSearch(term:string, expectedResultCount:int) : void
    + MultipleTermsSearch(term:string, expectedResultCount:int) : void
}
class MatchTests {
    {static} - Make(prefix:string, input:TestCaseData[]) : TestCaseData[]
    {static} - BasicCases() : TestCaseData[]
    {static} - PrefixCases() : TestCaseData[]
    {static} - CamelCaseSplitCases() : TestCaseData[]
    {static} - AbreviationCases() : TestCaseData[]
    + Match(path:string, query:string, expectedResult:bool) : void
    {static} - FilterCases : IEnumerable<TestCaseData> <<get>>
    + MatchWithFilter(items:List<SearcherItem>, query:string, filter:Func<string, SearcherItem, bool>, expectedResult:List<SearcherItem>) : void
}
SearcherTestsBase <|-- SearcherTests
@enduml
