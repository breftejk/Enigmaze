@startuml
class SearcherWindow {
    <<const>> - k_DatabaseDirectory : string = "/../Library/Searcher"
    {static} <<readonly>> - k_SearcherDefaultWidth : float = 300
    {static} <<readonly>> - k_DetailsDefaultWidth : float = 200
    {static} <<readonly>> - k_DefaultHeight : float = 300
    {static} <<readonly>> - k_MinSize : Vector2
    {static} - s_Size : Vector2
    {static} - s_Items : IEnumerable<SearcherItem>
    {static} - s_Searcher : Searcher
    {static} - s_ItemSelectedDelegate : Func<SearcherItem, bool>
    - m_AnalyticsDataDelegate : Action<Searcher.AnalyticsEvent>
    - m_SearcherControl : SearcherControl
    - m_OriginalMousePos : Vector2
    - m_OriginalWindowPos : Rect
    - m_NewWindowPos : Rect
    - m_IsMouseDownOnResizer : bool
    - m_IsMouseDownOnTitle : bool
    - m_FocusedBefore : Focusable
    {static} - Size : Vector2 <<get>> <<set>>
    + {static} Show(host:EditorWindow, items:IList<SearcherItem>, title:string, itemSelectedDelegate:Func<SearcherItem, bool>, displayPosition:Vector2, align:Alignment) : void
    + {static} Show(host:EditorWindow, items:IList<SearcherItem>, adapter:ISearcherAdapter, itemSelectedDelegate:Func<SearcherItem, bool>, displayPosition:Vector2, analyticsDataDelegate:Action<Searcher.AnalyticsEvent>, align:Alignment) : void
    + {static} Show(host:EditorWindow, items:IList<SearcherItem>, title:string, directoryPath:string, itemSelectedDelegate:Func<SearcherItem, bool>, displayPosition:Vector2, align:Alignment) : void
    + {static} Show(host:EditorWindow, items:IEnumerable<SearcherItem>, adapter:ISearcherAdapter, directoryPath:string, itemSelectedDelegate:Func<SearcherItem, bool>, displayPosition:Vector2, analyticsDataDelegate:Action<Searcher.AnalyticsEvent>, align:Alignment) : void
    + {static} Show(host:EditorWindow, searcher:Searcher, itemSelectedDelegate:Func<SearcherItem, bool>, displayPosition:Vector2, analyticsDataDelegate:Action<Searcher.AnalyticsEvent>, align:Alignment) : void
    + {static} Show(host:EditorWindow, searcher:Searcher, itemSelectedDelegate:Func<SearcherItem, bool>, analyticsDataDelegate:Action<Searcher.AnalyticsEvent>, rect:Rect) : void
    + {static} GetPositionWithAlignment(pos:Vector2, size:Vector2, align:Alignment) : Vector2
    {static} - GetPosition(host:EditorWindow, displayPosition:Vector2, align:Alignment) : Vector2
    - OnEnable() : void
    - OnDisable() : void
    - OnTitleMouseDown(evt:MouseDownEvent) : void
    - OnTitleMouseUp(evt:MouseUpEvent) : void
    - FinishMove() : void
    - OnTitleMouseMove(evt:MouseMoveEvent) : void
    - OnResizerMouseDown(evt:MouseDownEvent) : void
    - OnResizerMouseUp(evt:MouseUpEvent) : void
    - FinishResize() : void
    - OnResizerMouseMove(evt:MouseMoveEvent) : void
    - OnSearcherKeyDown(evt:KeyDownEvent) : void
    - OnGUI() : void
    - SelectionCallback(item:SearcherItem) : void
    - OnAnalyticsDataCallback(item:Searcher.AnalyticsEvent) : void
    - OnLostFocus() : void
    - HackDueToCloseOnLostFocusCrashing() : void
}
struct Alignment {
    + <<readonly>> vertical : Vertical
    + <<readonly>> horizontal : Horizontal
    + Alignment(v:Vertical, h:Horizontal)
}
enum Horizontal {
    Left= 0,
    Center,
    Right,
}
enum Vertical {
    Top= 0,
    Center,
    Bottom,
}
EditorWindow <|-- SearcherWindow
SearcherWindow +-- Alignment
Alignment +-- Horizontal
Alignment +-- Vertical
@enduml
