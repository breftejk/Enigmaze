@startuml
class SearcherDatabase {
    - m_Index : Dictionary<string, IReadOnlyList<ValueTuple<string, float>>>
    <<const>> - k_IsParallel : bool = true
    + MatchFilter : Func<string, SearcherItem, bool> <<get>> <<set>>
    + {static} Create(items:List<SearcherItem>, databaseDirectory:string, serializeToFile:bool) : SearcherDatabase
    + {static} Load(databaseDirectory:string) : SearcherDatabase
    + SearcherDatabase(db:IReadOnlyCollection<SearcherItem>)
    - SearcherDatabase(databaseDirectory:string, db:IReadOnlyCollection<SearcherItem>)
    + <<override>> Search(query:string, localMaxScore:float) : List<SearcherItem>
    # <<virtual>> Match(query:string, tokenizedQuery:IReadOnlyList<string>, item:SearcherItem, score:float) : bool
    - FilterSingleThreaded(query:string) : List<SearcherItem>
    - FilterMultiThreaded(query:string) : List<SearcherItem>
    <<readonly>> - k_ScoreCutOff : float = 0.33f
    - SearchSingleThreaded(query:string, tokenizedQuery:IReadOnlyList<string>, max:Result, finalResults:ICollection<SearcherItem>) : void
    - SearchMultithreaded(query:string, tokenizedQuery:IReadOnlyList<string>, max:Result, finalResults:List<SearcherItem>) : void
    - PostprocessResults(results:IEnumerable<Result>, items:ICollection<SearcherItem>, max:Result) : void
    + <<override>> BuildIndex() : void
    {static} - Tokenize(s:string) : IList<string>
    - Match(tokenizedQuery:IReadOnlyList<string>, itemPath:string, score:float) : bool
}
class Result {
    + item : SearcherItem
    + maxScore : float
}
SearcherDatabaseBase <|-- SearcherDatabase
SearcherDatabase +-- Result
@enduml
