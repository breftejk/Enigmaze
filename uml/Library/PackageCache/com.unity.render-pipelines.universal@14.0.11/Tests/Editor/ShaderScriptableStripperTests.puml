@startuml
class ShaderScriptableStripperTests {
    + TestStripUnusedShaders(shaderName:string, expectedNoFeatures:bool, expectedWithDeferredShading:bool) : void
    + TestStripUnusedShaders_Deferred(shader:Shader, expectedNoFeatures:bool, expectedWithDeferredShading:bool) : void
    + TestStripUnusedPass(shaderName:string) : void
    + TestStripUnusedPass_2D(shader:Shader) : void
    + TestStripUnusedPass_ShadowCaster(shader:Shader) : void
    + TestStripUnusedPass_Decals(shader:Shader) : void
    + TestStripInvalidVariants(shaderName:string, expectedTerrainHoles:bool, expectedTerrainHolesWithAlphaTestOn:bool, expectedSoftShadows:bool) : void
    + TestStripInvalidVariants_HDR(shader:Shader) : void
    + StripInvalidVariants_TerrainHoles(shader:Shader, expectedTerrainHoles:bool, expectedTerrainHolesWithAlphaTestOn:bool) : void
    + TestStripInvalidVariants_Shadows(shader:Shader, expectedSoftShadows:bool) : void
    + TestStripUnsupportedVariants(shaderName:string, expectedDirLightmap:bool, expectedLightmapProbes:bool, expectedEditorVizualization:bool) : void
    + StripUnsupportedVariants_DirectionalLightmap(shader:Shader, expectedDirLightmap:bool) : void
    + StripUnsupportedVariants_EditorVisualization(shader:Shader, expectedEditorVizualization:bool) : void
    + TestStripUnusedFeatures(shaderName:string) : void
    + TestStripUnusedFeatures_DebugDisplay(shader:Shader) : void
    + TestStripUnusedFeatures_DataDrivenLensFlare(shader:Shader) : void
    + TestStripUnusedFeatures_ScreenCoordOverride(shader:Shader) : void
    + TestStripUnusedFeatures_PunctualLightShadows(shader:Shader) : void
    + TestStripUnusedFeatures_FoveatedRendering(shader:Shader) : void
    + TestStripUnusedFeatures_SHAuto(shader:Shader) : void
    + TestStripUnusedFeatures_DeferredRendering(shader:Shader) : void
    + TestStripUnusedFeatures_MainLightShadows(shader:Shader) : void
    + TestStripUnusedFeatures_AdditionalLightShadows(shader:Shader) : void
    + TestStripUnusedFeatures_MixedLighting(shader:Shader) : void
    + TestStripUnusedFeatures_SoftShadows(shader:Shader) : void
    + TestStripUnusedFeatures_HDRGrading(shader:Shader) : void
    + TestStripUnusedFeatures_UseFastSRGBLinearConversion(shader:Shader) : void
    + TestStripUnusedFeatures_LightLayers(shader:Shader) : void
    + TestStripUnusedFeatures_RenderPassEnabled(shader:Shader) : void
    + TestStripUnusedFeatures_ReflectionProbes(shader:Shader) : void
    + TestStripUnusedFeatures_ForwardPlus(shader:Shader) : void
    + TestStripUnusedFeatures_AdditionalLights(shader:Shader) : void
    + TestStripUnusedFeatures_ScreenSpaceOcclusion(shader:Shader) : void
    + TestStripUnusedFeatures_DecalsDbuffer(shader:Shader) : void
    + TestStripUnusedFeatures_DecalsNormalBlend(shader:Shader) : void
    + TestStripUnusedFeatures_DecalLayers(shader:Shader) : void
    + TestStripUnusedFeatures_WriteRenderingLayers(shader:Shader) : void
    + TestStripUnusedFeatures_AccurateGbufferNormals(shader:Shader) : void
    + TestStripUnusedFeatures_LightCookies(shader:Shader) : void
    + TestStripVolumeFeatures(shaderName:string) : void
    + TestStripVolumeFeatures_UberPostShader(shader:Shader) : void
    + TestStripVolumeFeatures_BokehDepthOfFieldShader(shader:Shader) : void
    + TestStripVolumeFeatures_GaussianDepthOfFieldShader(shader:Shader) : void
    + TestStripVolumeFeatures_CameraMotionBlurShader(shader:Shader) : void
    + TestStripVolumeFeatures_PaniniProjectionShader(shader:Shader) : void
    + TestStripVolumeFeatures_BloomShader(shader:Shader) : void
}
struct TestStrippingData {
    + shaderFeatures : ShaderFeatures <<get>> <<set>>
    + volumeFeatures : VolumeFeatures <<get>> <<set>>
    + isGLDevice : bool <<get>> <<set>>
    + stripSoftShadowQualityLevels : bool <<get>> <<set>>
    + strip2DPasses : bool <<get>> <<set>>
    + stripDebugDisplayShaders : bool <<get>> <<set>>
    + stripScreenCoordOverrideVariants : bool <<get>> <<set>>
    + stripUnusedVariants : bool <<get>> <<set>>
    + stripUnusedPostProcessingVariants : bool <<get>> <<set>>
    + shader : Shader <<get>> <<set>>
    + shaderType : ShaderType <<get>> <<set>>
    + shaderCompilerPlatform : ShaderCompilerPlatform <<get>> <<set>>
    + passName : string <<get>> <<set>>
    + passType : PassType <<get>> <<set>>
    + passIdentifier : PassIdentifier <<get>> <<set>>
    + IsHDRShaderVariantValid : bool <<get>> <<set>>
    + IsKeywordEnabled(keyword:LocalKeyword) : bool
    + IsShaderFeatureEnabled(feature:ShaderFeatures) : bool
    + IsVolumeFeatureEnabled(feature:VolumeFeatures) : bool
    + PassHasKeyword(keyword:LocalKeyword) : bool
}
class TestHelper {
    + {static} s_EnabledKeywords : List<string>
    + {static} s_PassKeywords : List<string>
    + stripper : ShaderScriptableStripper
    + data : IShaderScriptableStrippingData
    + featureStripTool : ShaderStripTool<ShaderFeatures>
    - shader : Shader
    + TestHelper(shader:Shader, shaderFeatures:ShaderFeatures, volumeFeatures:VolumeFeatures, stripUnusedVariants:bool)
    + AreEqual(expected:bool, actual:bool) : void
    + IsTrue(actual:bool) : void
    + IsFalse(actual:bool) : void
}
ShaderScriptableStripperTests +-- TestStrippingData
IShaderScriptableStrippingData <|-- TestStrippingData
ShaderScriptableStripperTests +-- TestHelper
@enduml
