@startuml
enum ShaderFeatures {
    None= 0,
    MainLight= (1L << 0),
    MainLightShadows= (1L << 1),
    AdditionalLightsPixel= (1L << 2),
    AdditionalLightShadows= (1L << 3),
    AdditionalLightsVertex= (1L << 4),
    SoftShadows= (1L << 5),
    MixedLighting= (1L << 6),
    TerrainHoles= (1L << 7),
    DeferredShading= (1L << 8),
    AccurateGbufferNormals= (1L << 9),
    ScreenSpaceOcclusion= (1L << 10),
    ScreenSpaceShadows= (1L << 11),
    UseFastSRGBLinearConversion= (1L << 12),
    LightLayers= (1L << 13),
    ReflectionProbeBlending= (1L << 14),
    ReflectionProbeBoxProjection= (1L << 15),
    DBufferMRT1= (1L << 16),
    DBufferMRT2= (1L << 17),
    DBufferMRT3= (1L << 18),
    DecalScreenSpace= (1L << 19),
    DecalGBuffer= (1L << 20),
    DecalNormalBlendLow= (1L << 21),
    DecalNormalBlendMedium= (1L << 22),
    DecalNormalBlendHigh= (1L << 23),
    ForwardPlus= (1L << 24),
    RenderPassEnabled= (1L << 25),
    MainLightShadowsCascade= (1L << 26),
    DrawProcedural= (1L << 27),
    ScreenSpaceOcclusionAfterOpaque= (1L << 28),
    AdditionalLightsKeepOffVariants= (1L << 29),
    ShadowsKeepOffVariants= (1L << 30),
    DecalLayers= (1L << 32),
    OpaqueWriteRenderingLayers= (1L << 33),
    GBufferWriteRenderingLayers= (1L << 34),
    DepthNormalPassRenderingLayers= (1L << 35),
    LightCookies= (1L << 36),
    LODCrossFade=  (1L << 37),
    ProbeVolumeL1= (1L << 38),
    ProbeVolumeL2= (1L << 39),
    HdrGrading= (1L << 40),
    AutoSHMode= (1L << 41),
    AutoSHModePerVertex= (1L << 42),
    ExplicitSHMode= (1L << 43),
    DataDrivenLensFlare= (1L << 44),
    ScreenSpaceLensFlare= (1L << 45),
    SoftShadowsLow= (1L << 46),
    SoftShadowsMedium= (1L << 47),
    SoftShadowsHigh= (1L << 48),
}
enum VolumeFeatures {
    None= 0,
    Calculated= (1 << 0),
    LensDistortion= (1 << 1),
    Bloom= (1 << 2),
    ChromaticAberration= (1 << 3),
    ToneMapping= (1 << 4),
    FilmGrain= (1 << 5),
    DepthOfField= (1 << 6),
    CameraMotionBlur= (1 << 7),
    PaniniProjection= (1 << 8),
}
class ShaderBuildPreprocessor {
    + callbackOrder : int <<get>>
    + {static} s_StripUnusedVariants : bool
    + {static} s_StripDebugDisplayShaders : bool
    + {static} s_StripUnusedPostProcessingVariants : bool
    + {static} s_StripScreenCoordOverrideVariants : bool
    + {static} s_Strip2DPasses : bool
    + {static} s_UseSoftShadowQualityLevelKeywords : bool
    + {static} supportedFeaturesList : List<ShaderFeatures> <<get>>
    + {static} volumeFeatures : VolumeFeatures <<get>>
    - {static} s_StripXRVariants : bool
    - {static} s_KeepOffVariantForAdditionalLights : bool
    - {static} s_UseSHPerVertexForSHAuto : bool
    - {static} s_VolumeFeatures : VolumeFeatures
    - {static} s_SupportedFeaturesList : List<ShaderFeatures>
    + OnPreprocessBuild(report:BuildReport) : void
    + OnPostprocessBuild(report:BuildReport) : void
    - {static} GatherShaderFeatures(isDevelopmentBuild:bool) : void
    - {static} GetGlobalAndPlatformSettings(isDevelopmentBuild:bool) : void
    - {static} GetSupportedFeaturesFromVolumes() : void
    <<internal>> {static} GetSupportedShaderFeaturesFromAssets(urpAssets:List<UniversalRenderPipelineAsset>, rendererFeaturesList:List<ShaderFeatures>, stripUnusedVariants:bool) : void
    <<internal>> {static} GetSupportedShaderFeaturesFromAsset(urpAsset:UniversalRenderPipelineAsset, rendererFeaturesList:List<ShaderFeatures>, ssaoRendererFeatures:List<ScreenSpaceAmbientOcclusionSettings>, stripUnusedVariants:bool, containsForwardRenderer:bool, everyRendererHasSSAO:bool) : ShaderFeatures
    <<internal>> {static} GetSupportedShaderFeaturesFromRenderers(urpAsset:UniversalRenderPipelineAsset, rendererFeaturesList:List<ShaderFeatures>, urpAssetShaderFeatures:ShaderFeatures, ssaoRendererFeatures:List<ScreenSpaceAmbientOcclusionSettings>, stripUnusedVariants:bool, containsForwardRenderer:bool, everyRendererHasSSAO:bool) : ShaderFeatures
    <<internal>> {static} GetRendererRequirements(urpAsset:UniversalRenderPipelineAsset, renderer:ScriptableRenderer, rendererData:ScriptableRendererData, stripUnusedVariants:bool) : RendererRequirements
    <<internal>> {static} GetSupportedShaderFeaturesFromRenderer(rendererRequirements:RendererRequirements, rendererData:ScriptableRendererData, ssaoRendererFeatures:List<ScreenSpaceAmbientOcclusionSettings>, containsForwardRenderer:bool, urpAssetShaderFeatures:ShaderFeatures) : ShaderFeatures
    <<internal>> {static} GetSupportedShaderFeaturesFromRendererFeatures(rendererRequirements:RendererRequirements, rendererFeatures:List<ScriptableRendererFeature>, ssaoRendererFeatures:List<ScreenSpaceAmbientOcclusionSettings>) : ShaderFeatures
    - {static} GetFromDecalSurfaceData(surfaceData:DecalSurfaceData) : ShaderFeatures
    - {static} GetFromNormalBlend(normalBlend:DecalNormalBlend) : ShaderFeatures
    <<internal>> {static} CreatePrefilteringSettings(shaderFeatures:ShaderFeatures, isAssetUsingForward:bool, everyRendererHasSSAO:bool, stripXR:bool, stripHDR:bool, stripDebug:bool, stripScreenCoord:bool, stripUnusedVariants:bool, ssaoRendererFeatures:List<ScreenSpaceAmbientOcclusionSettings>) : ShaderPrefilteringData
    <<internal>> {static} IsFeatureEnabled(featureMask:ShaderFeatures, feature:ShaderFeatures) : bool
}
class PlatformBuildTimeDetect <<sealed>> {
    - {static} s_PlatformInfo : PlatformBuildTimeDetect
    <<internal>> isStandaloneXR : bool <<get>>
    <<internal>> isHololens : bool <<get>>
    <<internal>> isQuest : bool <<get>>
    <<internal>> isSwitch : bool <<get>>
    - PlatformBuildTimeDetect()
    <<internal>> {static} GetInstance() : PlatformBuildTimeDetect
    <<internal>> {static} ClearInstance() : void
}
struct RendererRequirements {
    + msaaSampleCount : int
    + isUniversalRenderer : bool
    + needsUnusedVariants : bool
    + needsProcedural : bool
    + needsMainLightShadows : bool
    + needsAdditionalLightShadows : bool
    + needsSoftShadows : bool
    + needsSoftShadowsQualityLevels : bool
    + needsShadowsOff : bool
    + needsAdditionalLightsOff : bool
    + needsGBufferRenderingLayers : bool
    + needsGBufferAccurateNormals : bool
    + needsRenderPass : bool
    + needsReflectionProbeBlending : bool
    + needsReflectionProbeBoxProjection : bool
    + needsSHVertexForSHAuto : bool
    + renderingMode : RenderingMode
}
IPreprocessBuildWithReport <|-- ShaderBuildPreprocessor
IPostprocessBuildWithReport <|-- ShaderBuildPreprocessor
ShaderBuildPreprocessor +-- PlatformBuildTimeDetect
ShaderBuildPreprocessor +-- RendererRequirements
@enduml
