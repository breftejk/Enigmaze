@startuml
abstract class ScriptableRenderPass <<partial>> {
    + <<virtual>> FrameCleanup(cmd:CommandBuffer) : void
}
class ForwardRenderer <<sealed>> {
    - {static} <<readonly>> k_ErrorMessage : string = "ForwardRenderer has been deprecated. Use UniversalRenderer instead"
    + ForwardRenderer(data:ForwardRendererData)
    + <<override>> Setup(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> SetupLights(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> SetupCullingParameters(cullingParameters:ScriptableCullingParameters, cameraData:CameraData) : void
    + <<override>> FinishRendering(cmd:CommandBuffer) : void
    <<internal>> <<override>> SwapColorBuffer(cmd:CommandBuffer) : void
    <<internal>> <<override>> GetCameraColorFrontBuffer(cmd:CommandBuffer) : RTHandle
}
class AdditionalLightsShadowCasterPass <<partial>> {
    + {static} m_AdditionalShadowsBufferId : int
    + {static} m_AdditionalShadowsIndicesId : int
}
enum ShadowCascadesOption {
    NoCascades,
    TwoCascades,
    FourCascades,
}
enum ShaderVariantLogLevel {
    Disabled,
    OnlyUniversalRPShaders,
    AllShaders,
}
class UniversalRenderPipelineAsset <<partial>> {
    - m_ShaderVariantLogLevel : int
    + shaderVariantLogLevel : ShaderVariantLogLevel <<get>> <<set>>
    - m_ShadowCascades : ShadowCascadesOption
    + shadowCascadeOption : ShadowCascadesOption <<get>> <<set>>
}
abstract class ScriptableRenderer <<partial>> {
    + cameraDepth : RenderTargetIdentifier <<get>>
}
class Bloom <<sealed>> <<partial>> {
    + skipIterations : ClampedIntParameter
}
ScriptableRenderer <|-- ForwardRenderer
VolumeComponent <|-- Bloom
IPostProcessComponent <|-- Bloom
@enduml
