@startuml
enum ScriptableRenderPassInput {
    None= 0,
    Depth= 1 << 0,
    Normal= 1 << 1,
    Color= 1 << 2,
    Motion= 1 << 3,
}
enum RenderPassEvent {
    BeforeRendering= 0,
    BeforeRenderingShadows= 50,
    AfterRenderingShadows= 100,
    BeforeRenderingPrePasses= 150,
    AfterRenderingPrePasses= 200,
    BeforeRenderingGbuffer= 210,
    AfterRenderingGbuffer= 220,
    BeforeRenderingDeferredLights= 230,
    AfterRenderingDeferredLights= 240,
    BeforeRenderingOpaques= 250,
    AfterRenderingOpaques= 300,
    BeforeRenderingSkybox= 350,
    AfterRenderingSkybox= 400,
    BeforeRenderingTransparents= 450,
    AfterRenderingTransparents= 500,
    BeforeRenderingPostProcessing= 550,
    AfterRenderingPostProcessing= 600,
    AfterRendering= 1000,
}
class RenderPassEventsEnumValues <<static>> {
    + {static} values : int[]
    {static} - RenderPassEventsEnumValues()
}
abstract class ScriptableRenderPass <<partial>> {
    {static} + k_CameraTarget : RTHandle
    + renderPassEvent : RenderPassEvent <<get>> <<set>>
    + colorAttachments : RenderTargetIdentifier[] <<get>>
    + colorAttachment : RenderTargetIdentifier <<get>>
    + depthAttachment : RenderTargetIdentifier <<get>>
    + colorAttachmentHandles : RTHandle[] <<get>>
    + colorAttachmentHandle : RTHandle <<get>>
    + depthAttachmentHandle : RTHandle <<get>>
    + colorStoreActions : RenderBufferStoreAction[] <<get>>
    + depthStoreAction : RenderBufferStoreAction <<get>>
    <<internal>> overriddenColorStoreActions : bool[] <<get>>
    <<internal>> overriddenDepthStoreAction : bool <<get>>
    + input : ScriptableRenderPassInput <<get>>
    + clearFlag : ClearFlag <<get>>
    + clearColor : Color <<get>>
    - m_ColorStoreActions : RenderBufferStoreAction[]
    - m_DepthStoreAction : RenderBufferStoreAction
    - m_OverriddenColorStoreActions : bool[]
    - m_OverriddenDepthStoreAction : bool = false
    # <<internal>> profilingSampler : ProfilingSampler <<get>> <<set>>
    <<internal>> overrideCameraTarget : bool <<get>> <<set>>
    <<internal>> isBlitRenderPass : bool <<get>> <<set>>
    <<internal>> useNativeRenderPass : bool <<get>> <<set>>
    <<internal>> renderPassQueueIndex : int <<get>> <<set>>
    <<internal>> m_ColorAttachmentIndices : NativeArray<int>
    <<internal>> m_InputAttachmentIndices : NativeArray<int>
    <<internal>> renderTargetFormat : GraphicsFormat[] <<get>> <<set>>
    <<internal>> m_UsesRTHandles : bool
    - m_ColorAttachments : RTHandle[]
    - m_ColorAttachmentIds : RenderTargetIdentifier[]
    <<internal>> m_InputAttachments : RTHandle[]
    <<internal>> m_InputAttachmentIsTransient : bool[]
    - m_DepthAttachment : RTHandle
    - m_DepthAttachmentId : RenderTargetIdentifier
    - m_Input : ScriptableRenderPassInput
    - m_ClearFlag : ClearFlag
    - m_ClearColor : Color
    {static} <<internal>> GetActiveDebugHandler(renderingData:RenderingData) : DebugHandler
    + ScriptableRenderPass()
    + ConfigureInput(passInput:ScriptableRenderPassInput) : void
    + ConfigureColorStoreAction(storeAction:RenderBufferStoreAction, attachmentIndex:uint) : void
    + ConfigureColorStoreActions(storeActions:RenderBufferStoreAction[]) : void
    + ConfigureDepthStoreAction(storeAction:RenderBufferStoreAction) : void
    <<internal>> ConfigureInputAttachments(input:RTHandle, isTransient:bool) : void
    <<internal>> ConfigureInputAttachments(inputs:RTHandle[]) : void
    <<internal>> ConfigureInputAttachments(inputs:RTHandle[], isTransient:bool[]) : void
    <<internal>> SetInputAttachmentTransient(idx:int, isTransient:bool) : void
    <<internal>> IsInputAttachmentTransient(idx:int) : bool
    + ResetTarget() : void
    + ConfigureTarget(colorAttachment:RenderTargetIdentifier, depthAttachment:RenderTargetIdentifier) : void
    + ConfigureTarget(colorAttachment:RTHandle, depthAttachment:RTHandle) : void
    + ConfigureTarget(colorAttachments:RenderTargetIdentifier[], depthAttachment:RenderTargetIdentifier) : void
    + ConfigureTarget(colorAttachments:RTHandle[], depthAttachment:RTHandle) : void
    <<internal>> ConfigureTarget(colorAttachments:RTHandle[], depthAttachment:RTHandle, formats:GraphicsFormat[]) : void
    + ConfigureTarget(colorAttachment:RenderTargetIdentifier) : void
    + ConfigureTarget(colorAttachment:RTHandle) : void
    + ConfigureTarget(colorAttachments:RenderTargetIdentifier[]) : void
    + ConfigureTarget(colorAttachments:RTHandle[]) : void
    + ConfigureClear(clearFlag:ClearFlag, clearColor:Color) : void
    + <<virtual>> OnCameraSetup(cmd:CommandBuffer, renderingData:RenderingData) : void
    + <<virtual>> Configure(cmd:CommandBuffer, cameraTextureDescriptor:RenderTextureDescriptor) : void
    + <<virtual>> OnCameraCleanup(cmd:CommandBuffer) : void
    + <<virtual>> OnFinishCameraStackRendering(cmd:CommandBuffer) : void
    + {abstract} Execute(context:ScriptableRenderContext, renderingData:RenderingData) : void
    <<internal>> <<virtual>> RecordRenderGraph(renderGraph:RenderGraph, renderingData:RenderingData) : void
    + Blit(cmd:CommandBuffer, source:RenderTargetIdentifier, destination:RenderTargetIdentifier, material:Material, passIndex:int) : void
    + Blit(cmd:CommandBuffer, source:RTHandle, destination:RTHandle, material:Material, passIndex:int) : void
    + Blit(cmd:CommandBuffer, data:RenderingData, material:Material, passIndex:int) : void
    + Blit(cmd:CommandBuffer, data:RenderingData, source:RTHandle, material:Material, passIndex:int) : void
    + CreateDrawingSettings(shaderTagId:ShaderTagId, renderingData:RenderingData, sortingCriteria:SortingCriteria) : DrawingSettings
    + CreateDrawingSettings(shaderTagIdList:List<ShaderTagId>, renderingData:RenderingData, sortingCriteria:SortingCriteria) : DrawingSettings
    {static} <<internal>> GetRenderPassEventRange(renderPassEvent:RenderPassEvent) : int
}
@enduml
