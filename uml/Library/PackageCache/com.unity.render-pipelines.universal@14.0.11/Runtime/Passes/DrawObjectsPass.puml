@startuml
class DrawObjectsWithRenderingLayersPass {
    - m_ColorTargetIndentifiers : RTHandle[]
    - m_DepthTargetIndentifiers : RTHandle
    + DrawObjectsWithRenderingLayersPass(profilerTag:URPProfileId, opaque:bool, evt:RenderPassEvent, renderQueueRange:RenderQueueRange, layerMask:LayerMask, stencilState:StencilState, stencilReference:int)
    + Setup(colorAttachment:RTHandle, renderingLayersTexture:RTHandle, depthAttachment:RTHandle) : void
    + <<override>> Configure(cmd:CommandBuffer, cameraTextureDescriptor:RenderTextureDescriptor) : void
    # <<override>> OnExecute(cmd:CommandBuffer) : void
}
class DrawObjectsPass {
    - m_FilteringSettings : FilteringSettings
    - m_RenderStateBlock : RenderStateBlock
    - m_ShaderTagIdList : List<ShaderTagId>
    - m_ProfilerTag : string
    - m_ProfilingSampler : ProfilingSampler
    - m_IsOpaque : bool
    + m_IsActiveTargetBackBuffer : bool
    + m_ShouldTransparentsReceiveShadows : bool
    - m_PassData : PassData
    - m_UseDepthPriming : bool
    {static} <<readonly>> - s_DrawObjectPassDataPropID : int
    + DrawObjectsPass(profilerTag:string, shaderTagIds:ShaderTagId[], opaque:bool, evt:RenderPassEvent, renderQueueRange:RenderQueueRange, layerMask:LayerMask, stencilState:StencilState, stencilReference:int)
    + DrawObjectsPass(profilerTag:string, opaque:bool, evt:RenderPassEvent, renderQueueRange:RenderQueueRange, layerMask:LayerMask, stencilState:StencilState, stencilReference:int)
    <<internal>> DrawObjectsPass(profileId:URPProfileId, opaque:bool, evt:RenderPassEvent, renderQueueRange:RenderQueueRange, layerMask:LayerMask, stencilState:StencilState, stencilReference:int)
    + <<override>> Execute(context:ScriptableRenderContext, renderingData:RenderingData) : void
    - {static} CameraSetup(cmd:CommandBuffer, data:PassData, renderingData:RenderingData) : void
    - {static} ExecutePass(context:ScriptableRenderContext, data:PassData, renderingData:RenderingData, yFlip:bool) : void
    <<internal>> Render(renderGraph:RenderGraph, colorTarget:TextureHandle, depthTarget:TextureHandle, mainShadowsTexture:TextureHandle, additionalShadowsTexture:TextureHandle, renderingData:RenderingData) : void
    # <<virtual>> OnExecute(cmd:CommandBuffer) : void
}
class PassData {
    <<internal>> m_Albedo : TextureHandle
    <<internal>> m_Depth : TextureHandle
    <<internal>> m_RenderingData : RenderingData
    <<internal>> m_IsOpaque : bool
    <<internal>> m_RenderStateBlock : RenderStateBlock
    <<internal>> m_FilteringSettings : FilteringSettings
    <<internal>> m_ShaderTagIdList : List<ShaderTagId>
    <<internal>> m_ProfilingSampler : ProfilingSampler
    <<internal>> m_ShouldTransparentsReceiveShadows : bool
    <<internal>> m_IsActiveTargetBackBuffer : bool
    <<internal>> pass : DrawObjectsPass
}
DrawObjectsPass <|-- DrawObjectsWithRenderingLayersPass
ScriptableRenderPass <|-- DrawObjectsPass
DrawObjectsPass +-- PassData
@enduml
