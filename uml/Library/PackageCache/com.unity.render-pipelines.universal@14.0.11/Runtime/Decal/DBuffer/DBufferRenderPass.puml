@startuml
class DecalDrawDBufferSystem {
    + DecalDrawDBufferSystem(entityManager:DecalEntityManager)
    # <<override>> GetPassIndex(decalCachedChunk:DecalCachedChunk) : int
}
class DBufferRenderPass {
    - {static} s_DBufferNames : string[]
    - {static} s_DBufferDepthName : string = "DBufferDepth"
    - m_DrawSystem : DecalDrawDBufferSystem
    - m_Settings : DBufferSettings
    - m_DBufferClear : Material
    - m_FilteringSettings : FilteringSettings
    - m_ShaderTagIdList : List<ShaderTagId>
    - m_ProfilingSampler : ProfilingSampler
    - m_DBufferClearSampler : ProfilingSampler
    - m_DecalLayers : bool
    - m_DBufferDepth : RTHandle
    <<internal>> dBufferColorHandles : RTHandle[] <<get>>
    <<internal>> depthHandle : RTHandle <<get>>
    <<internal>> dBufferDepth : RTHandle <<get>>
    + DBufferRenderPass(dBufferClear:Material, settings:DBufferSettings, drawSystem:DecalDrawDBufferSystem, decalLayers:bool)
    + Dispose() : void
    + Setup(cameraData:CameraData) : void
    + Setup(cameraData:CameraData, depthTextureHandle:RTHandle) : void
    + <<override>> OnCameraSetup(cmd:CommandBuffer, renderingData:RenderingData) : void
    + <<override>> Execute(context:ScriptableRenderContext, renderingData:RenderingData) : void
    + <<override>> OnCameraCleanup(cmd:CommandBuffer) : void
}
DecalDrawSystem <|-- DecalDrawDBufferSystem
ScriptableRenderPass <|-- DBufferRenderPass
@enduml
