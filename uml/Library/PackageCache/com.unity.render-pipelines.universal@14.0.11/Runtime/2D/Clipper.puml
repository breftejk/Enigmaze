@startuml
struct DoublePoint {
    + X : double
    + Y : double
    + DoublePoint(x:double, y:double)
    + DoublePoint(dp:DoublePoint)
    + DoublePoint(ip:IntPoint)
}
class PolyTree {
    <<internal>> m_AllPolys : List<PolyNode>
    + Clear() : void
    + GetFirst() : PolyNode
    + Total : int <<get>>
}
class PolyNode {
    <<internal>> m_Parent : PolyNode
    <<internal>> m_polygon : Path
    <<internal>> m_Index : int
    <<internal>> m_jointype : JoinType
    <<internal>> m_endtype : EndType
    <<internal>> m_Childs : List<PolyNode>
    - IsHoleNode() : bool
    + ChildCount : int <<get>>
    + Contour : Path <<get>>
    <<internal>> AddChild(Child:PolyNode) : void
    + GetNext() : PolyNode
    <<internal>> GetNextSiblingUp() : PolyNode
    + Childs : List<PolyNode> <<get>>
    + Parent : PolyNode <<get>>
    + IsHole : bool <<get>>
    + IsOpen : bool <<get>> <<set>>
}
struct Int128 {
    - hi : Int64
    - lo : UInt64
    + Int128(_lo:Int64)
    + Int128(_hi:Int64, _lo:UInt64)
    + Int128(val:Int128)
    + IsNegative() : bool
    + <<override>> Equals(obj:System.Object) : bool
    + <<override>> GetHashCode() : int
    + {static} Int128Mul(lhs:Int64, rhs:Int64) : Int128
}
struct IntPoint {
    + N : ClipInt
    + X : ClipInt
    + Y : ClipInt
    + D : ClipInt
    + NX : double
    + NY : double
    + IntPoint(X:ClipInt, Y:ClipInt)
    + IntPoint(x:double, y:double)
    + IntPoint(pt:IntPoint)
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
}
struct IntRect {
    + left : ClipInt
    + top : ClipInt
    + right : ClipInt
    + bottom : ClipInt
    + IntRect(l:ClipInt, t:ClipInt, r:ClipInt, b:ClipInt)
    + IntRect(ir:IntRect)
}
enum ClipType {
    ctIntersection,
    ctUnion,
    ctDifference,
    ctXor,
}
enum PolyType {
    ptSubject,
    ptClip,
}
enum PolyFillType {
    pftEvenOdd,
    pftNonZero,
    pftPositive,
    pftNegative,
}
enum JoinType {
    jtRound,
}
enum EndType {
    etClosedPolygon,
    etClosedLine,
}
enum EdgeSide {
    esLeft,
    esRight,
}
enum Direction {
    dRightToLeft,
    dLeftToRight,
}
class TEdge {
    <<internal>> Bot : IntPoint
    <<internal>> Curr : IntPoint
    <<internal>> Top : IntPoint
    <<internal>> Delta : IntPoint
    <<internal>> Dx : double
    <<internal>> PolyTyp : PolyType
    <<internal>> Side : EdgeSide
    <<internal>> WindDelta : int
    <<internal>> WindCnt : int
    <<internal>> WindCnt2 : int
    <<internal>> OutIdx : int
    <<internal>> Next : TEdge
    <<internal>> Prev : TEdge
    <<internal>> NextInLML : TEdge
    <<internal>> NextInAEL : TEdge
    <<internal>> PrevInAEL : TEdge
    <<internal>> NextInSEL : TEdge
    <<internal>> PrevInSEL : TEdge
}
class IntersectNode {
    <<internal>> Edge1 : TEdge
    <<internal>> Edge2 : TEdge
    <<internal>> Pt : IntPoint
}
class MyIntersectNodeSort {
    + Compare(node1:IntersectNode, node2:IntersectNode) : int
}
class LocalMinima {
    <<internal>> Y : ClipInt
    <<internal>> LeftBound : TEdge
    <<internal>> RightBound : TEdge
    <<internal>> Next : LocalMinima
}
class Scanbeam {
    <<internal>> Y : ClipInt
    <<internal>> Next : Scanbeam
}
class Maxima {
    <<internal>> X : ClipInt
    <<internal>> Next : Maxima
    <<internal>> Prev : Maxima
}
class OutRec {
    <<internal>> Idx : int
    <<internal>> IsHole : bool
    <<internal>> IsOpen : bool
    <<internal>> FirstLeft : OutRec
    <<internal>> Pts : OutPt
    <<internal>> BottomPt : OutPt
    <<internal>> PolyNode : PolyNode
}
class OutPt {
    <<internal>> Idx : int
    <<internal>> Pt : IntPoint
    <<internal>> Next : OutPt
    <<internal>> Prev : OutPt
}
class Join {
    <<internal>> OutPt1 : OutPt
    <<internal>> OutPt2 : OutPt
    <<internal>> OffPt : IntPoint
}
class ClipperBase {
    <<internal>> <<const>> horizontal : double
    <<internal>> <<const>> Skip : int
    <<internal>> <<const>> Unassigned : int
    <<internal>> <<const>> tolerance : double = 1.0E-20
    <<internal>> {static} near_zero(val:double) : bool
    + <<const>> loRange : ClipInt = 0x3FFFFFFF
    + <<const>> hiRange : ClipInt = 0x3FFFFFFFFFFFFFFFL
    <<internal>> m_MinimaList : LocalMinima
    <<internal>> m_CurrentLM : LocalMinima
    <<internal>> m_edges : List<List<TEdge>>
    <<internal>> m_Scanbeam : Scanbeam
    <<internal>> m_PolyOuts : List<OutRec>
    <<internal>> m_ActiveEdges : TEdge
    <<internal>> m_UseFullRange : bool
    <<internal>> m_HasOpenPaths : bool
    + PreserveCollinear : bool <<get>> <<set>>
    + Swap(val1:ClipInt, val2:ClipInt) : void
    <<internal>> {static} IsHorizontal(e:TEdge) : bool
    <<internal>> PointIsVertex(pt:IntPoint, pp:OutPt) : bool
    <<internal>> PointOnLineSegment(pt:IntPoint, linePt1:IntPoint, linePt2:IntPoint, UseFullRange:bool) : bool
    <<internal>> PointOnPolygon(pt:IntPoint, pp:OutPt, UseFullRange:bool) : bool
    <<internal>> {static} SlopesEqual(e1:TEdge, e2:TEdge, UseFullRange:bool) : bool
    <<internal>> {static} SlopesEqual(pt1:IntPoint, pt2:IntPoint, pt3:IntPoint, UseFullRange:bool) : bool
    <<internal>> {static} SlopesEqual(pt1:IntPoint, pt2:IntPoint, pt3:IntPoint, pt4:IntPoint, UseFullRange:bool) : bool
    <<internal>> ClipperBase()
    + <<virtual>> Clear() : void
    - DisposeLocalMinimaList() : void
    - RangeTest(Pt:IntPoint, useFullRange:bool) : void
    - InitEdge(e:TEdge, eNext:TEdge, ePrev:TEdge, pt:IntPoint) : void
    - InitEdge2(e:TEdge, polyType:PolyType) : void
    - FindNextLocMin(E:TEdge) : TEdge
    - ProcessBound(E:TEdge, LeftBoundIsForward:bool) : TEdge
    + AddPath(pg:Path, polyType:PolyType, Closed:bool) : bool
    + AddPaths(ppg:Paths, polyType:PolyType, closed:bool) : bool
    <<internal>> Pt2IsBetweenPt1AndPt3(pt1:IntPoint, pt2:IntPoint, pt3:IntPoint) : bool
    - RemoveEdge(e:TEdge) : TEdge
    - SetDx(e:TEdge) : void
    - InsertLocalMinima(newLm:LocalMinima) : void
    <<internal>> PopLocalMinima(Y:ClipInt, current:LocalMinima) : Boolean
    - ReverseHorizontal(e:TEdge) : void
    <<internal>> <<virtual>> Reset() : void
    + {static} GetBounds(paths:Paths) : IntRect
    <<internal>> InsertScanbeam(Y:ClipInt) : void
    <<internal>> PopScanbeam(Y:ClipInt) : Boolean
    <<internal>> LocalMinimaPending() : Boolean
    <<internal>> CreateOutRec() : OutRec
    <<internal>> DisposeOutRec(index:int) : void
    <<internal>> UpdateEdgeIntoAEL(e:TEdge) : void
    <<internal>> SwapPositionsInAEL(edge1:TEdge, edge2:TEdge) : void
    <<internal>> DeleteFromAEL(e:TEdge) : void
}
class Clipper {
    + <<const>> ioReverseSolution : int = 1
    + <<const>> ioStrictlySimple : int = 2
    + <<const>> ioPreserveCollinear : int = 4
    - m_ClipType : ClipType
    - m_Maxima : Maxima
    - m_SortedEdges : TEdge
    - m_IntersectList : List<IntersectNode>
    - m_IntersectNodeComparer : IComparer<IntersectNode>
    - m_ExecuteLocked : bool
    - m_ClipFillType : PolyFillType
    - m_SubjFillType : PolyFillType
    - m_Joins : List<Join>
    - m_GhostJoins : List<Join>
    - m_UsingPolyTree : bool
    + Clipper(InitOptions:int)
    - InsertMaxima(X:ClipInt) : void
    + LastIndex : int <<get>> <<set>>
    + ReverseSolution : bool <<get>> <<set>>
    + StrictlySimple : bool <<get>> <<set>>
    + Execute(clipType:ClipType, solution:Paths, FillType:PolyFillType) : bool
    + Execute(clipType:ClipType, polytree:PolyTree, FillType:PolyFillType) : bool
    + Execute(clipType:ClipType, solution:Paths, subjFillType:PolyFillType, clipFillType:PolyFillType) : bool
    + Execute(clipType:ClipType, polytree:PolyTree, subjFillType:PolyFillType, clipFillType:PolyFillType) : bool
    <<internal>> FixHoleLinkage(outRec:OutRec) : void
    - ExecuteInternal() : bool
    - DisposeAllPolyPts() : void
    - AddJoin(Op1:OutPt, Op2:OutPt, OffPt:IntPoint) : void
    - AddGhostJoin(Op:OutPt, OffPt:IntPoint) : void
    - InsertLocalMinimaIntoAEL(botY:ClipInt) : void
    - InsertEdgeIntoAEL(edge:TEdge, startEdge:TEdge) : void
    - E2InsertsBeforeE1(e1:TEdge, e2:TEdge) : bool
    - IsEvenOddFillType(edge:TEdge) : bool
    - IsEvenOddAltFillType(edge:TEdge) : bool
    - IsContributing(edge:TEdge) : bool
    - SetWindingCount(edge:TEdge) : void
    - AddEdgeToSEL(edge:TEdge) : void
    <<internal>> PopEdgeFromSEL(e:TEdge) : Boolean
    - CopyAELToSEL() : void
    - SwapPositionsInSEL(edge1:TEdge, edge2:TEdge) : void
    - AddLocalMaxPoly(e1:TEdge, e2:TEdge, pt:IntPoint) : void
    - AddLocalMinPoly(e1:TEdge, e2:TEdge, pt:IntPoint) : OutPt
    - AddOutPt(e:TEdge, pt:IntPoint) : OutPt
    - GetLastOutPt(e:TEdge) : OutPt
    <<internal>> SwapPoints(pt1:IntPoint, pt2:IntPoint) : void
    - HorzSegmentsOverlap(seg1a:ClipInt, seg1b:ClipInt, seg2a:ClipInt, seg2b:ClipInt) : bool
    - SetHoleState(e:TEdge, outRec:OutRec) : void
    - GetDx(pt1:IntPoint, pt2:IntPoint) : double
    - FirstIsBottomPt(btmPt1:OutPt, btmPt2:OutPt) : bool
    - GetBottomPt(pp:OutPt) : OutPt
    - GetLowermostRec(outRec1:OutRec, outRec2:OutRec) : OutRec
    - OutRec1RightOfOutRec2(outRec1:OutRec, outRec2:OutRec) : bool
    - GetOutRec(idx:int) : OutRec
    - AppendPolygon(e1:TEdge, e2:TEdge) : void
    - ReversePolyPtLinks(pp:OutPt) : void
    - {static} SwapSides(edge1:TEdge, edge2:TEdge) : void
    - {static} SwapPolyIndexes(edge1:TEdge, edge2:TEdge) : void
    - IntersectEdges(e1:TEdge, e2:TEdge, pt:IntPoint) : void
    - DeleteFromSEL(e:TEdge) : void
    - ProcessHorizontals() : void
    - GetHorzDirection(HorzEdge:TEdge, Dir:Direction, Left:ClipInt, Right:ClipInt) : void
    - ProcessHorizontal(horzEdge:TEdge) : void
    - GetNextInAEL(e:TEdge, Direction:Direction) : TEdge
    - IsMinima(e:TEdge) : bool
    - IsMaxima(e:TEdge, Y:double) : bool
    - IsIntermediate(e:TEdge, Y:double) : bool
    <<internal>> GetMaximaPair(e:TEdge) : TEdge
    <<internal>> GetMaximaPairEx(e:TEdge) : TEdge
    - ProcessIntersections(topY:ClipInt) : bool
    - BuildIntersectList(topY:ClipInt) : void
    - EdgesAdjacent(inode:IntersectNode) : bool
    - {static} IntersectNodeSort(node1:IntersectNode, node2:IntersectNode) : int
    - FixupIntersectionOrder() : bool
    - ProcessIntersectList() : void
    <<internal>> {static} Round(value:double) : ClipInt
    - {static} TopX(edge:TEdge, currentY:ClipInt) : ClipInt
    - IntersectPoint(edge1:TEdge, edge2:TEdge, ip:IntPoint) : void
    - ProcessEdgesAtTopOfScanbeam(topY:ClipInt) : void
    - DoMaxima(e:TEdge) : void
    + {static} ReversePaths(polys:Paths) : void
    + {static} Orientation(poly:Path) : bool
    - PointCount(pts:OutPt) : int
    - BuildResult(polyg:Paths) : void
    - BuildResult2(polytree:PolyTree) : void
    - FixupOutPolyline(outrec:OutRec) : void
    - FixupOutPolygon(outRec:OutRec) : void
    - DupOutPt(outPt:OutPt, InsertAfter:bool) : OutPt
    - GetOverlap(a1:ClipInt, a2:ClipInt, b1:ClipInt, b2:ClipInt, Left:ClipInt, Right:ClipInt) : bool
    - JoinHorz(op1:OutPt, op1b:OutPt, op2:OutPt, op2b:OutPt, Pt:IntPoint, DiscardLeft:bool) : bool
    - JoinPoints(j:Join, outRec1:OutRec, outRec2:OutRec) : bool
    + {static} PointInPolygon(pt:IntPoint, path:Path) : int
    - {static} PointInPolygon(pt:IntPoint, op:OutPt) : int
    - {static} Poly2ContainsPoly1(outPt1:OutPt, outPt2:OutPt) : bool
    - FixupFirstLefts1(OldOutRec:OutRec, NewOutRec:OutRec) : void
    - FixupFirstLefts2(innerOutRec:OutRec, outerOutRec:OutRec) : void
    - FixupFirstLefts3(OldOutRec:OutRec, NewOutRec:OutRec) : void
    - {static} ParseFirstLeft(FirstLeft:OutRec) : OutRec
    - JoinCommonEdges() : void
    - UpdateOutPtIdxs(outrec:OutRec) : void
    - DoSimplePolygons() : void
    + {static} Area(poly:Path) : double
    <<internal>> Area(outRec:OutRec) : double
    <<internal>> Area(op:OutPt) : double
    + {static} SimplifyPolygon(poly:Path, fillType:PolyFillType) : Paths
    + {static} SimplifyPolygons(polys:Paths, fillType:PolyFillType) : Paths
    - {static} DistanceSqrd(pt1:IntPoint, pt2:IntPoint) : double
    - {static} DistanceFromLineSqrd(pt:IntPoint, ln1:IntPoint, ln2:IntPoint) : double
    - {static} SlopesNearCollinear(pt1:IntPoint, pt2:IntPoint, pt3:IntPoint, distSqrd:double) : bool
    - {static} PointsAreClose(pt1:IntPoint, pt2:IntPoint, distSqrd:double) : bool
    - {static} ExcludeOp(op:OutPt) : OutPt
    + {static} CleanPolygon(path:Path, distance:double) : Path
    + {static} CleanPolygons(polys:Paths, distance:double) : Paths
    <<internal>> {static} Minkowski(pattern:Path, path:Path, IsSum:bool, IsClosed:bool) : Paths
    + {static} MinkowskiSum(pattern:Path, path:Path, pathIsClosed:bool) : Paths
    - {static} TranslatePath(path:Path, delta:IntPoint) : Path
    + {static} MinkowskiSum(pattern:Path, paths:Paths, pathIsClosed:bool) : Paths
    + {static} MinkowskiDiff(poly1:Path, poly2:Path) : Paths
    + {static} PolyTreeToPaths(polytree:PolyTree) : Paths
    <<internal>> {static} AddPolyNodeToPaths(polynode:PolyNode, nt:NodeType, paths:Paths) : void
    + {static} OpenPathsFromPolyTree(polytree:PolyTree) : Paths
    + {static} ClosedPathsFromPolyTree(polytree:PolyTree) : Paths
}
class ClipperOffset {
    - m_destPolys : Paths
    - m_srcPoly : Path
    - m_destPoly : Path
    - m_normals : List<DoublePoint>
    - m_delta : double
    - m_sinA : double
    - m_sin : double
    - m_cos : double
    - m_StepsPerRad : double
    - m_lowest : IntPoint
    - m_polyNodes : PolyNode
    + ArcTolerance : double <<get>> <<set>>
    - <<const>> two_pi : double
    - <<const>> def_arc_tolerance : double = 0.25
    + ClipperOffset(arcTolerance:double)
    + Clear() : void
    <<internal>> {static} Round(value:double) : ClipInt
    + AddPath(path:Path, joinType:JoinType, endType:EndType) : void
    + AddPaths(paths:Paths, joinType:JoinType, endType:EndType) : void
    - FixOrientations() : void
    <<internal>> {static} GetUnitNormal(pt1:IntPoint, pt2:IntPoint) : DoublePoint
    - DoOffset(delta:double) : void
    + Execute(solution:Paths, delta:double, inputSize:int) : void
    + Execute(solution:PolyTree, delta:double) : void
    - OffsetPoint(j:int, k:int, jointype:JoinType) : void
    <<internal>> DoSquare(j:int, k:int) : void
    <<internal>> DoMiter(j:int, k:int, r:double) : void
    <<internal>> DoRound(j:int, k:int) : void
}
class ClipperException {
    + ClipperException(description:string)
}
enum NodeType {
    ntAny,
    ntOpen,
    ntClosed,
}
PolyNode <|-- PolyTree
"IComparer`1" "<IntersectNode>" <|-- MyIntersectNodeSort
ClipperBase <|-- Clipper
Exception <|-- ClipperException
Clipper +-- NodeType
@enduml
