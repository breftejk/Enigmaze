@startuml
struct PlanarGraph {
    - {static} <<readonly>> kEpsilon : double = 0.00001
    - {static} <<readonly>> kMaxIntersectionTolerance : int = 4
    <<internal>> {static} RemoveDuplicateEdges(edges:NativeArray<int2>, edgeCount:int, duplicates:NativeArray<int>, duplicateCount:int) : void
    <<internal>> {static} CheckCollinear(a0:double2, a1:double2, b0:double2, b1:double2) : bool
    <<internal>> {static} LineLineIntersection(a0:double2, a1:double2, b0:double2, b1:double2) : bool
    <<internal>> {static} LineLineIntersection(p1:double2, p2:double2, p3:double2, p4:double2, result:double2) : bool
    <<internal>> {static} CalculateEdgeIntersections(edges:NativeArray<int2>, edgeCount:int, points:NativeArray<double2>, pointCount:int, results:NativeArray<int2>, intersects:NativeArray<double2>, resultCount:int) : bool
    <<internal>> {static} CalculateTJunctions(edges:NativeArray<int2>, edgeCount:int, points:NativeArray<double2>, pointCount:int, results:NativeArray<int2>, resultCount:int) : bool
    <<internal>> {static} CutEdges(points:NativeArray<double2>, pointCount:int, edges:NativeArray<int2>, edgeCount:int, tJunctions:NativeArray<int2>, tJunctionCount:int, intersections:NativeArray<int2>, intersects:NativeArray<double2>, intersectionCount:int) : bool
    <<internal>> {static} RemoveDuplicatePoints(points:NativeArray<double2>, pointCount:int, duplicates:NativeArray<int>, duplicateCount:int, allocator:Allocator) : void
    <<internal>> {static} Validate(allocator:Allocator, inputPoints:NativeArray<float2>, pointCount:int, inputEdges:NativeArray<int2>, edgeCount:int, outputPoints:NativeArray<float2>, outputPointCount:int, outputEdges:NativeArray<int2>, outputEdgeCount:int) : bool
}
@enduml
