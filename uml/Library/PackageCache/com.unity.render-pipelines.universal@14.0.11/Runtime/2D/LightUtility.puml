@startuml
class LightUtility <<static>> {
    + {static} CheckForChange(a:Light2D.LightType, b:Light2D.LightType) : bool
    + {static} CheckForChange(a:int, b:int) : bool
    + {static} CheckForChange(a:float, b:float) : bool
    + {static} CheckForChange(a:bool, b:bool) : bool
    {static} - TestPivot(path:List<IntPoint>, activePoint:int, lastPoint:long) : bool
    {static} - DegeneratePivots(path:List<IntPoint>, inPath:List<IntPoint>, interiorStart:int) : List<IntPoint>
    {static} - SortPivots(outPath:List<IntPoint>, inPath:List<IntPoint>) : List<IntPoint>
    {static} - FixPivots(outPath:List<IntPoint>, inPath:List<IntPoint>, interiorStart:int) : List<IntPoint>
    <<internal>> {static} GetOutlinePath(shapePath:Vector3[], offsetDistance:float) : List<Vector2>
    {static} - TransferToMesh(vertices:NativeArray<LightMeshVertex>, vertexCount:int, indices:NativeArray<ushort>, indexCount:int, light:Light2D) : void
    + {static} GenerateShapeMesh(light:Light2D, shapePath:Vector3[], falloffDistance:float) : Bounds
    + {static} GenerateParametricMesh(light:Light2D, radius:float, falloffDistance:float, angle:float, sides:int) : Bounds
    + {static} GenerateSpriteMesh(light:Light2D, sprite:Sprite) : Bounds
    + {static} GetShapePathHash(path:Vector3[]) : int
}
enum PivotType {
    PivotBase,
    PivotCurve,
    PivotIntersect,
    PivotSkip,
    PivotClip,
}
struct LightMeshVertex {
    + position : Vector3
    + color : Color
    + uv : Vector2
    + {static} <<readonly>> VertexLayout : VertexAttributeDescriptor[]
}
LightUtility +-- PivotType
LightUtility +-- LightMeshVertex
@enduml
