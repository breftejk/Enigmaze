@startuml
struct Vec3 {
    + <<readonly>> {static} Zero : Vec3
    + X : Real
    + Y : Real
    + Z : Real
    + {static} Sub(lhs:Vec3, rhs:Vec3, result:Vec3) : void
    + {static} Neg(v:Vec3) : void
    + {static} Dot(u:Vec3, v:Vec3, dot:Real) : void
    + {static} Normalize(v:Vec3) : void
    + {static} LongAxis(v:Vec3) : int
    + <<override>> ToString() : string
}
class MeshUtils <<static>> {
    + <<const>> Undef : int
    + {static} MakeEdge(eNext:Edge) : Edge
    + {static} Splice(a:Edge, b:Edge) : void
    + {static} MakeVertex(eOrig:Edge, vNext:Vertex) : void
    + {static} MakeFace(eOrig:Edge, fNext:Face) : void
    + {static} KillEdge(eDel:Edge) : void
    + {static} KillVertex(vDel:Vertex, newOrg:Vertex) : void
    + {static} KillFace(fDel:Face, newLFace:Face) : void
    + {static} FaceArea(f:Face) : Real
}
abstract class "Pooled`1"<T> {
    - {static} _stack : Stack<T>
    + {abstract} Reset() : void
    + <<virtual>> OnFree() : void
    + {static} Create() : T
    + Free() : void
}
class Vertex {
    <<internal>> _prev : Vertex
    <<internal>> _next : Vertex
    <<internal>> _anEdge : Edge
    <<internal>> _coords : Vec3
    <<internal>> _s : Real
    <<internal>> _t : Real
    <<internal>> _pqHandle : PQHandle
    <<internal>> _n : int
    <<internal>> _data : object
    + <<override>> Reset() : void
}
class Face {
    <<internal>> _prev : Face
    <<internal>> _next : Face
    <<internal>> _anEdge : Edge
    <<internal>> _trail : Face
    <<internal>> _n : int
    <<internal>> _marked : bool
    <<internal>> _inside : bool
    <<internal>> VertsCount : int <<get>>
    + <<override>> Reset() : void
}
struct EdgePair {
    <<internal>> _e : Edge
    <<internal>> _eSym : Edge
    + {static} Create() : EdgePair
    + Reset() : void
}
class Edge {
    <<internal>> _pair : EdgePair
    <<internal>> _next : Edge
    <<internal>> _Sym : Edge
    <<internal>> _Onext : Edge
    <<internal>> _Lnext : Edge
    <<internal>> _Org : Vertex
    <<internal>> _Lface : Face
    <<internal>> _activeRegion : Tess.ActiveRegion
    <<internal>> _winding : int
    <<internal>> _Rface : Face <<get>> <<set>>
    <<internal>> _Dst : Vertex <<get>> <<set>>
    <<internal>> _Oprev : Edge <<get>> <<set>>
    <<internal>> _Lprev : Edge <<get>> <<set>>
    <<internal>> _Dprev : Edge <<get>> <<set>>
    <<internal>> _Rprev : Edge <<get>> <<set>>
    <<internal>> _Dnext : Edge <<get>> <<set>>
    <<internal>> _Rnext : Edge <<get>> <<set>>
    <<internal>> {static} EnsureFirst(e:Edge) : void
    + <<override>> Reset() : void
}
MeshUtils +-- "Pooled`1"
MeshUtils +-- Vertex
"Pooled`1" "<Vertex>" <|-- Vertex
MeshUtils +-- Face
"Pooled`1" "<Face>" <|-- Face
MeshUtils +-- EdgePair
MeshUtils +-- Edge
"Pooled`1" "<Edge>" <|-- Edge
@enduml
