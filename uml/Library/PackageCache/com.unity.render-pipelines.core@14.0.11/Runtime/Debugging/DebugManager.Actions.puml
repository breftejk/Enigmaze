@startuml
enum DebugAction {
    EnableDebugMenu,
    PreviousDebugPanel,
    NextDebugPanel,
    Action,
    MakePersistent,
    MoveVertical,
    MoveHorizontal,
    Multiplier,
    ResetAll,
    DebugActionCount,
}
enum DebugActionRepeatMode {
    Never,
    Delay,
}
class DebugManager <<sealed>> <<partial>> {
    <<const>> - kEnableDebugBtn1 : string = "Enable Debug Button 1"
    <<const>> - kEnableDebugBtn2 : string = "Enable Debug Button 2"
    <<const>> - kDebugPreviousBtn : string = "Debug Previous"
    <<const>> - kDebugNextBtn : string = "Debug Next"
    <<const>> - kValidateBtn : string = "Debug Validate"
    <<const>> - kPersistentBtn : string = "Debug Persistent"
    <<const>> - kDPadVertical : string = "Debug Vertical"
    <<const>> - kDPadHorizontal : string = "Debug Horizontal"
    <<const>> - kMultiplierBtn : string = "Debug Multiplier"
    <<const>> - kResetBtn : string = "Debug Reset"
    <<const>> - kEnableDebug : string = "Enable Debug"
    - m_DebugActions : DebugActionDesc[]
    - m_DebugActionStates : DebugActionState[]
    - RegisterActions() : void
    <<internal>> EnableInputActions() : void
    - AddAction(action:DebugAction, desc:DebugActionDesc) : void
    - SampleAction(actionIndex:int) : void
    - UpdateAction(actionIndex:int) : void
    <<internal>> UpdateActions() : void
    <<internal>> GetAction(action:DebugAction) : float
    <<internal>> GetActionToggleDebugMenuWithTouch() : bool
    <<internal>> GetActionReleaseScrollTarget() : bool
    - RegisterInputs() : void
}
class DebugActionDesc {
    + axisTrigger : string = ""
    + buttonTriggerList : List<string[]>
    + keyTriggerList : List<KeyCode[]>
    + repeatMode : DebugActionRepeatMode
    + repeatDelay : float
}
class DebugActionState {
    - m_Type : DebugActionKeyType
    - m_PressedButtons : string[]
    - m_PressedAxis : string = ""
    - m_PressedKeys : KeyCode[]
    - m_TriggerPressedUp : bool[]
    - m_Timer : float
    <<internal>> runningAction : bool <<get>>
    <<internal>> actionState : float <<get>>
    - Trigger(triggerCount:int, state:float) : void
    + TriggerWithButton(buttons:string[], state:float) : void
    + TriggerWithAxis(axis:string, state:float) : void
    + TriggerWithKey(keys:KeyCode[], state:float) : void
    - Reset() : void
    + Update(desc:DebugActionDesc) : void
}
enum DebugActionKeyType {
    Button,
    Axis,
    Key,
}
DebugActionState +-- DebugActionKeyType
@enduml
