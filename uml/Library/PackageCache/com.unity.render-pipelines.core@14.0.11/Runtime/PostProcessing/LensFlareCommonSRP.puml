@startuml
class LensFlareCommonSRP <<sealed>> {
    - {static} m_Instance : LensFlareCommonSRP = null
    - {static} <<readonly>> m_Padlock : object
    - {static} m_Data : System.Collections.Generic.List<LensFlareCompInfo>
    - {static} m_AvailableIndicies : System.Collections.Generic.List<int>
    + {static} maxLensFlareWithOcclusion : int = 128
    + {static} maxLensFlareWithOcclusionTemporalSample : int = 8
    + {static} mergeNeeded : int = 1
    + {static} occlusionRT : RTHandle = null
    - {static} frameIdx : int = 0
    - LensFlareCommonSRP()
    - {static} <<readonly>> s_SupportsLensFlareTexFormat : bool
    {static} + IsOcclusionRTCompatible() : bool
    {static} + Initialize() : void
    {static} + Dispose() : void
    + {static} Instance : LensFlareCommonSRP <<get>>
    - Data : System.Collections.Generic.List<LensFlareCompInfo> <<get>>
    + IsEmpty() : bool
    - GetNextAvailableIndex() : int
    + AddData(newData:LensFlareComponentSRP) : void
    + RemoveData(data:LensFlareComponentSRP) : void
    {static} + ShapeAttenuationPointLight() : float
    {static} + ShapeAttenuationDirLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationSpotConeLight(forward:Vector3, wo:Vector3, spotAngle:float, innerSpotPercent01:float) : float
    {static} + ShapeAttenuationSpotBoxLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationSpotPyramidLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationAreaTubeLight(lightPositionWS:Vector3, lightSide:Vector3, lightWidth:float, cam:Camera) : float
    {static} + ShapeAttenuationAreaRectangleLight(forward:Vector3, wo:Vector3) : float
    {static} + ShapeAttenuationAreaDiscLight(forward:Vector3, wo:Vector3) : float
    {static} - IsLensFlareSRPHidden(cam:Camera, comp:LensFlareComponentSRP, data:LensFlareDataSRP) : bool
    {static} + GetFlareData0(screenPos:Vector2, translationScale:Vector2, rayOff0:Vector2, vLocalScreenRatio:Vector2, angleDeg:float, position:float, angularOffset:float, positionOffset:Vector2, autoRotate:bool) : Vector4
    {static} - GetLensFlareRayOffset(screenPos:Vector2, position:float, globalCos0:float, globalSin0:float) : Vector2
    {static} - WorldToViewport(camera:Camera, isLocalLight:bool, isCameraRelative:bool, viewProjMatrix:Matrix4x4, positionWS:Vector3) : Vector3
    {static} - WorldToViewportLocal(isCameraRelative:bool, viewProjMatrix:Matrix4x4, cameraPosWS:Vector3, positionWS:Vector3) : Vector3
    {static} - WorldToViewportDistance(cam:Camera, positionWS:Vector3) : Vector3
    {static} + IsCloudLayerOpacityNeeded(cam:Camera) : bool
    {static} - SetOcclusionPermutation(cmd:Rendering.CommandBuffer, useBackgroundCloudOcclusion:bool, volumetricCloudOcclusion:bool, hasCloudLayer:bool, _FlareCloudOpacity:int, _FlareSunOcclusionTex:int, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture) : void
    {static} + ComputeOcclusion(lensFlareShader:Material, cam:Camera, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:Rendering.CommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, _FlareOcclusionTex:int, _FlareCloudOpacity:int, _FlareOcclusionIndex:int, _FlareTex:int, _FlareColorValue:int, _FlareSunOcclusionTex:int, _FlareData0:int, _FlareData1:int, _FlareData2:int, _FlareData3:int, _FlareData4:int) : void
    {static} + DoLensFlareDataDrivenCommon(lensFlareShader:Material, cam:Camera, actualWidth:float, actualHeight:float, usePanini:bool, paniniDistance:float, paniniCropToFit:float, isCameraRelative:bool, cameraPositionWS:Vector3, viewProjMatrix:Matrix4x4, cmd:Rendering.CommandBuffer, taaEnabled:bool, hasCloudLayer:bool, cloudOpacityTexture:Texture, sunOcclusionTexture:Texture, colorBuffer:Rendering.RenderTargetIdentifier, GetLensFlareLightAttenuation:System.Func<Light, Camera, Vector3, float>, _FlareOcclusionRemapTex:int, _FlareOcclusionTex:int, _FlareOcclusionIndex:int, _FlareCloudOpacity:int, _FlareSunOcclusionTex:int, _FlareTex:int, _FlareColorValue:int, _FlareData0:int, _FlareData1:int, _FlareData2:int, _FlareData3:int, _FlareData4:int, debugView:bool) : void
    {static} - DoPaniniProjection(screenPos:Vector2, actualWidth:float, actualHeight:float, fieldOfView:float, paniniProjectionCropToFit:float, paniniProjectionDistance:float) : Vector2
    {static} - CalcViewExtents(actualWidth:float, actualHeight:float, fieldOfView:float) : Vector2
    {static} - CalcCropExtents(actualWidth:float, actualHeight:float, fieldOfView:float, d:float) : Vector2
    {static} - Panini_Generic_Inv(projPos:Vector2, d:float) : Vector2
}
class LensFlareCompInfo {
    <<internal>> index : int
    <<internal>> comp : LensFlareComponentSRP
    <<internal>> LensFlareCompInfo(idx:int, cmp:LensFlareComponentSRP)
}
LensFlareCommonSRP +-- LensFlareCompInfo
@enduml
