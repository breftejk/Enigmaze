@startuml
class AtlasAllocator {
    - m_Root : AtlasNode
    - m_Width : int
    - m_Height : int
    - powerOfTwoPadding : bool
    - m_NodePool : ObjectPool<AtlasNode>
    + AtlasAllocator(width:int, height:int, potPadding:bool)
    + Allocate(result:Vector4, width:int, height:int) : bool
    + Reset() : void
}
class Texture2DAtlas {
    - # <<const>> kGPUTexInvalid : int = 0
    - # <<const>> kGPUTexValidMip0 : int = 1
    - # <<const>> kGPUTexValidMipAll : int = 2
    - # m_AtlasTexture : RTHandle = null
    - # m_Width : int
    - # m_Height : int
    - # m_Format : GraphicsFormat
    - # m_UseMipMaps : bool
    - m_IsAtlasTextureOwner : bool = false
    - m_AtlasAllocator : AtlasAllocator = null
    - m_AllocationCache : Dictionary<int, (Vector4 scaleOffset, Vector2Int size)>
    - m_IsGPUTextureUpToDate : Dictionary<int, int>
    - m_TextureHashes : Dictionary<int, int>
    {static} <<readonly>> - fullScaleOffset : Vector4
    {static} <<readonly>> - s_MaxMipLevelPadding : int = 10
    + {static} maxMipLevelPadding : int <<get>>
    + AtlasTexture : RTHandle <<get>>
    + Texture2DAtlas(width:int, height:int, format:GraphicsFormat, filterMode:FilterMode, powerOfTwoPadding:bool, name:string, useMipMap:bool)
    + Release() : void
    + ResetAllocator() : void
    + ClearTarget(cmd:CommandBuffer) : void
    - # GetTextureMipmapCount(width:int, height:int) : int
    - # Is2D(texture:Texture) : bool
    - # IsSingleChannelBlit(source:Texture, destination:Texture) : bool
    - Blit2DTexture(cmd:CommandBuffer, scaleOffset:Vector4, texture:Texture, sourceScaleOffset:Vector4, blitMips:bool, blitType:BlitType) : void
    - # MarkGPUTextureValid(instanceId:int, mipAreValid:bool) : void
    - # MarkGPUTextureInvalid(instanceId:int) : void
    + <<virtual>> BlitTexture(cmd:CommandBuffer, scaleOffset:Vector4, texture:Texture, sourceScaleOffset:Vector4, blitMips:bool, overrideInstanceID:int) : void
    + <<virtual>> BlitOctahedralTexture(cmd:CommandBuffer, scaleOffset:Vector4, texture:Texture, sourceScaleOffset:Vector4, blitMips:bool, overrideInstanceID:int) : void
    + <<virtual>> BlitCubeTexture2D(cmd:CommandBuffer, scaleOffset:Vector4, texture:Texture, blitMips:bool, overrideInstanceID:int) : void
    + <<virtual>> AllocateTexture(cmd:CommandBuffer, scaleOffset:Vector4, texture:Texture, width:int, height:int, overrideInstanceID:int) : bool
    + AllocateTextureWithoutBlit(texture:Texture, width:int, height:int, scaleOffset:Vector4) : bool
    + <<virtual>> AllocateTextureWithoutBlit(instanceId:int, width:int, height:int, scaleOffset:Vector4) : bool
    - # GetTextureHash(textureA:Texture, textureB:Texture) : int
    + GetTextureID(texture:Texture) : int
    + GetTextureID(textureA:Texture, textureB:Texture) : int
    + IsCached(scaleOffset:Vector4, textureA:Texture, textureB:Texture) : bool
    + IsCached(scaleOffset:Vector4, texture:Texture) : bool
    + IsCached(scaleOffset:Vector4, id:int) : bool
    <<internal>> GetCachedTextureSize(id:int) : Vector2Int
    + <<virtual>> NeedsUpdate(texture:Texture, needMips:bool) : bool
    + <<virtual>> NeedsUpdate(textureA:Texture, textureB:Texture, needMips:bool) : bool
    + <<virtual>> AddTexture(cmd:CommandBuffer, scaleOffset:Vector4, texture:Texture) : bool
    + <<virtual>> UpdateTexture(cmd:CommandBuffer, oldTexture:Texture, newTexture:Texture, scaleOffset:Vector4, sourceScaleOffset:Vector4, updateIfNeeded:bool, blitMips:bool) : bool
    + <<virtual>> UpdateTexture(cmd:CommandBuffer, texture:Texture, scaleOffset:Vector4, updateIfNeeded:bool, blitMips:bool) : bool
    <<internal>> EnsureTextureSlot(isUploadNeeded:bool, scaleBias:Vector4, key:int, width:int, height:int) : bool
}
class AtlasNode {
    + m_RightChild : AtlasNode = null
    + m_BottomChild : AtlasNode = null
    + m_Rect : Vector4
    + Allocate(pool:ObjectPool<AtlasNode>, width:int, height:int, powerOfTwoPadding:bool) : AtlasNode
    + Release(pool:ObjectPool<AtlasNode>) : void
}
enum BlitType {
    Default,
    CubeTo2DOctahedral,
    SingleChannel,
    CubeTo2DOctahedralSingleChannel,
}
AtlasAllocator +-- AtlasNode
Texture2DAtlas +-- BlitType
@enduml
