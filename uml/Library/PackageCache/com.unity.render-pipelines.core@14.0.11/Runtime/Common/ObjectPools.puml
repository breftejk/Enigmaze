@startuml
class "ObjectPool`1"<T> {
    <<readonly>> - m_Stack : Stack<T>
    <<readonly>> - m_ActionOnGet : UnityAction<T>
    <<readonly>> - m_ActionOnRelease : UnityAction<T>
    <<readonly>> - m_CollectionCheck : bool = true
    + countAll : int <<get>>
    + countActive : int <<get>>
    + countInactive : int <<get>>
    + ObjectPool(actionOnGet:UnityAction<T>, actionOnRelease:UnityAction<T>, collectionCheck:bool)
    + Get() : T
    + Get(v:T) : PooledObject
    + Release(element:T) : void
}
class "GenericPool`1"<T> <<static>> {
    {static} <<readonly>> - s_Pool : ObjectPool<T>
    + {static} Get() : T
    + {static} Get(value:T) : ObjectPool<T>.PooledObject
    + {static} Release(toRelease:T) : void
}
class "UnsafeGenericPool`1"<T> <<static>> {
    {static} <<readonly>> - s_Pool : ObjectPool<T>
    + {static} Get() : T
    + {static} Get(value:T) : ObjectPool<T>.PooledObject
    + {static} Release(toRelease:T) : void
}
class "ListPool`1"<T> <<static>> {
    {static} <<readonly>> - s_Pool : ObjectPool<List<T>>
    + {static} Get() : List<T>
    + {static} Get(value:List<T>) : ObjectPool<List<T>>.PooledObject
    + {static} Release(toRelease:List<T>) : void
}
class "HashSetPool`1"<T> <<static>> {
    {static} <<readonly>> - s_Pool : ObjectPool<HashSet<T>>
    + {static} Get() : HashSet<T>
    + {static} Get(value:HashSet<T>) : ObjectPool<HashSet<T>>.PooledObject
    + {static} Release(toRelease:HashSet<T>) : void
}
class "DictionaryPool`2"<TKey,TValue> <<static>> {
    {static} <<readonly>> - s_Pool : ObjectPool<Dictionary<TKey, TValue>>
    + {static} Get() : Dictionary<TKey, TValue>
    + {static} Get(value:Dictionary<TKey, TValue>) : ObjectPool<Dictionary<TKey, TValue>>.PooledObject
    + {static} Release(toRelease:Dictionary<TKey, TValue>) : void
}
struct PooledObject {
    <<readonly>> - m_ToReturn : T
    <<readonly>> - m_Pool : ObjectPool<T>
    <<internal>> PooledObject(value:T, pool:ObjectPool<T>)
    - Dispose() : void
}
"ObjectPool`1" +-- PooledObject
IDisposable <|-- PooledObject
@enduml
