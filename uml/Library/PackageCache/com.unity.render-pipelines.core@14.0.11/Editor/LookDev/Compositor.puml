@startuml
enum ShadowCompositionPass {
    MainView,
    ShadowMask,
}
enum CompositionFinal {
    First,
    Second,
}
class RenderTextureCache {
    <<const>> - k_PassPerViewCount : int = 3
    <<const>> - k_ViewCount : int = 2
    <<const>> - k_TextureCacheSize : int
    - m_RTs : RenderTexture[]
    - computeIndex(index:ViewIndex, passIndex:ShadowCompositionPass) : int
    - computeIndex(index:CompositionFinal) : int
    - UpdateSize(index:int, rect:Rect, pixelPerfect:bool, renderingCamera:Camera, renderDocName:string) : void
    + UpdateSize(rect:Rect, index:ViewIndex, pixelPerfect:bool, renderingCamera:Camera) : void
    + UpdateSize(rect:Rect, index:CompositionFinal, pixelPerfect:bool, renderingCamera:Camera) : void
    - m_Disposed : bool = false
    + Dispose() : void
}
class Compositer {
    + {static} <<readonly>> firstViewGizmoColor : Color
    + {static} <<readonly>> secondViewGizmoColor : Color
    {static} - s_Material : Material
    {static} - material : Material <<get>>
    - m_Displayer : IViewDisplayer
    - m_Contexts : Context
    - m_RenderTextures : RenderTextureCache
    - m_Renderer : Renderer
    - m_RenderDataCache : RenderingData[]
    - m_pixelPerfect : bool
    - m_Disposed : bool
    + pixelPerfect : bool <<get>> <<set>>
    - m_AmbientColor : Color
    - m_RenderDocAcquisitionRequested : bool
    + Compositer(displayer:IViewDisplayer, dataProvider:IDataProvider, stages:StageCache)
    - RenderDocAcquisitionRequested() : void
    - CleanUp() : void
    + Dispose() : void
    + Render() : void
    - AcquireDataForView(index:ViewIndex, viewport:Rect) : void
    - RenderSingleAndOutput(index:ViewIndex) : void
    - RenderCompositeAndOutput() : void
    - Compositing(rect:Rect, pass:int, finalBufferIndex:CompositionFinal) : void
    + GetViewFromComposition(localCoordinate:Vector2) : ViewIndex
}
IDisposable <|-- RenderTextureCache
IDisposable <|-- Compositer
@enduml
