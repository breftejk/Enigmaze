@startuml
class CameraController {
    - m_DirectionKeyPressed : Direction
    - m_StartZoom : float = 0.0f
    - m_ZoomSpeed : float = 0.0f
    - m_TotalMotion : float = 0.0f
    - m_MotionDirection : Vector3
    - m_FlySpeedNormalized : float = .5f
    - m_FlySpeed : float = 1f
    - m_FlySpeedAccelerated : float = 0f
    <<const>> - m_FlySpeedMin : float = .01f
    <<const>> - m_FlySpeedMax : float = 2f
    <<const>> - k_FlyAcceleration : float = 1.1f
    - m_ShiftBoostedFly : bool = false
    - m_InFlyMotion : bool
    - m_IsDragging : bool
    {static} - s_Timer : TimeHelper
    - m_BehaviorState : ViewTool
    - behaviorState : ViewTool <<get>> <<set>>
    # m_CameraState : CameraState
    - m_Window : DisplayWindow
    # m_Focused : Action
    - screen : Rect <<get>>
    - inFlyMotion : bool <<get>> <<set>>
    - flySpeedNormalized : float <<get>> <<set>>
    - flySpeed : float <<get>> <<set>>
    <<virtual>> # isDragging : bool <<get>> <<set>>
    + CameraController(window:DisplayWindow, focused:Action)
    + UpdateCameraState(context:Context, index:ViewIndex) : void
    - ResetCameraControl() : void
    # <<virtual>> OnScrollWheel(evt:WheelEvent) : void
    - OnMouseDrag(evt:MouseMoveEvent) : void
    - OnKeyDown(evt:KeyDownEvent) : void
    - OnChangeFPSCameraSpeed(evt:WheelEvent) : void
    - OnZoom(evt:WheelEvent) : void
    - OnMouseDragOrbit(evt:MouseMoveEvent) : void
    - OnMouseDragFPS(evt:MouseMoveEvent) : void
    - OnMouseDragPan(evt:MouseMoveEvent) : void
    - OnMouseDragZoom(evt:MouseMoveEvent) : void
    - OnKeyDownReset(evt:KeyDownEvent) : void
    - OnKeyUpOrDownFPS(evt:KeyboardEventBase<T>) : void
    - RegisterMotionChange(direction:Direction, evt:KeyboardEventBase<T>) : void
    - GetMotionDirection() : Vector3
    - UpdateFPSMotion() : void
    - GetKeyCombinationByID(ID:string, combination:KeyCombination) : bool
    - GetBehaviorTool(evt:MouseEventBase<T>, onMac:bool) : ViewTool
    - OnMouseUp(evt:MouseUpEvent) : void
    - OnMouseDown(evt:MouseDownEvent) : void
    # <<override>> RegisterCallbacksOnTarget() : void
    # <<override>> UnregisterCallbacksFromTarget() : void
}
class SwitchableCameraController {
    - m_FirstView : CameraState
    - m_SecondView : CameraState
    - m_CurrentViewIndex : ViewIndex
    - switchedDrag : bool = false
    - switchedWheel : bool = false
    + SwitchableCameraController(window:DisplayWindow, focused:Action<ViewIndex>)
    + UpdateCameraState(context:Context) : void
    - SwitchTo(index:ViewIndex) : void
    + SwitchUntilNextEndOfDrag() : void
    <<override>> # isDragging : bool <<get>> <<set>>
    + SwitchUntilNextWheelEvent() : void
    # <<override>> OnScrollWheel(evt:WheelEvent) : void
}
enum Direction {
    None= 0,
    Up= 1 << 0,
    Down= 1 << 1,
    Left= 1 << 2,
    Right= 1 << 3,
    Forward= 1 << 4,
    Backward= 1 << 5,
    All= Up | Down | Left | Right | Forward | Backward,
}
struct KeyCombination {
    - key : KeyCode
    - modifier : EventModifiers
    + shiftOnLastMatch : bool
    + KeyCombination(shortcutCombination:UnityEditor.ShortcutManagement.KeyCombination)
    + Match(evt:IKeyboardEvent, atLeastForModifier:bool) : bool
}
struct TimeHelper {
    - lastTime : long
    + Begin() : void
    + Update() : float
}
Manipulator <|-- CameraController
CameraController <|-- SwitchableCameraController
CameraController +-- Direction
CameraController +-- KeyCombination
CameraController +-- TimeHelper
@enduml
