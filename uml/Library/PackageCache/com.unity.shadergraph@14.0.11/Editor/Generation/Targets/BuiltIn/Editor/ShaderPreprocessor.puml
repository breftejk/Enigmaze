@startuml
enum ShaderFeatures {
    None= 0,
    MainLight= (1 << 0),
    MainLightShadows= (1 << 1),
    AdditionalLights= (1 << 2),
    AdditionalLightShadows= (1 << 3),
    VertexLighting= (1 << 4),
    SoftShadows= (1 << 5),
    MixedLighting= (1 << 6),
    TerrainHoles= (1 << 7),
    DeferredShading= (1 << 8),
    DeferredWithAccurateGbufferNormals= (1 << 9),
    DeferredWithoutAccurateGbufferNormals= (1 << 10),
    ScreenSpaceOcclusion= (1 << 11),
    ScreenSpaceShadows= (1 << 12),
    ReflectionProbeBlending= (1 << 13),
    ReflectionProbeBoxProjection= (1 << 14),
}
class ShaderKeywordStrings <<static>> {
    + {static} <<readonly>> MainLightShadows : string = "_MAIN_LIGHT_SHADOWS"
    + {static} <<readonly>> MainLightShadowCascades : string = "_MAIN_LIGHT_SHADOWS_CASCADE"
    + {static} <<readonly>> MainLightShadowScreen : string = "_MAIN_LIGHT_SHADOWS_SCREEN"
    + {static} <<readonly>> AdditionalLightsVertex : string = "_ADDITIONAL_LIGHTS_VERTEX"
    + {static} <<readonly>> AdditionalLightsPixel : string = "_ADDITIONAL_LIGHTS"
    + {static} <<readonly>> AdditionalLightShadows : string = "_ADDITIONAL_LIGHT_SHADOWS"
    + {static} <<readonly>> ReflectionProbeBlending : string = "_REFLECTION_PROBE_BLENDING"
    + {static} <<readonly>> ReflectionProbeBoxProjection : string = "_REFLECTION_PROBE_BOX_PROJECTION"
    + {static} <<readonly>> SoftShadows : string = "_SHADOWS_SOFT"
    + {static} <<readonly>> CastingPunctualLightShadow : string = "_CASTING_PUNCTUAL_LIGHT_SHADOW"
    + {static} <<readonly>> MixedLightingSubtractive : string = "_MIXED_LIGHTING_SUBTRACTIVE"
    + {static} <<readonly>> LightmapShadowMixing : string = "LIGHTMAP_SHADOW_MIXING"
    + {static} <<readonly>> ShadowsShadowMask : string = "SHADOWS_SHADOWMASK"
    + {static} <<readonly>> ScreenSpaceOcclusion : string = "_SCREEN_SPACE_OCCLUSION"
    + {static} <<readonly>> _GBUFFER_NORMALS_OCT : string = "_GBUFFER_NORMALS_OCT"
    + {static} <<readonly>> LIGHTMAP_ON : string = "LIGHTMAP_ON"
    + {static} <<readonly>> DYNAMICLIGHTMAP_ON : string = "DYNAMICLIGHTMAP_ON"
    + {static} <<readonly>> _ALPHATEST_ON : string = "_ALPHATEST_ON"
    + {static} <<readonly>> DIRLIGHTMAP_COMBINED : string = "DIRLIGHTMAP_COMBINED"
    + {static} <<readonly>> EDITOR_VISUALIZATION : string = "EDITOR_VISUALIZATION"
}
class ShaderPreprocessor {
    + {static} <<readonly>> kPassNameGBuffer : string = "BuiltIn Deferred"
    <<internal>> {static}  <<event>> shaderPreprocessed : Action<Shader, ShaderSnippetData, int, double> 
    - m_MainLightShadows : ShaderKeyword
    - m_MainLightShadowsCascades : ShaderKeyword
    - m_MainLightShadowsScreen : ShaderKeyword
    - m_AdditionalLightsVertex : ShaderKeyword
    - m_AdditionalLightsPixel : ShaderKeyword
    - m_AdditionalLightShadows : ShaderKeyword
    - m_ReflectionProbeBlending : ShaderKeyword
    - m_ReflectionProbeBoxProjection : ShaderKeyword
    - m_CastingPunctualLightShadow : ShaderKeyword
    - m_SoftShadows : ShaderKeyword
    - m_MixedLightingSubtractive : ShaderKeyword
    - m_LightmapShadowMixing : ShaderKeyword
    - m_ShadowsShadowMask : ShaderKeyword
    - m_Lightmap : ShaderKeyword
    - m_DynamicLightmap : ShaderKeyword
    - m_DirectionalLightmap : ShaderKeyword
    - m_AlphaTestOn : ShaderKeyword
    - m_GbufferNormalsOct : ShaderKeyword
    - m_ScreenSpaceOcclusion : ShaderKeyword
    - m_EditorVisualization : ShaderKeyword
    - m_ShaderGraphShaderTag : ShaderTagId
    - m_TotalVariantsInputCount : int
    - m_TotalVariantsOutputCount : int
    + callbackOrder : int <<get>>
    - IsFeatureEnabled(featureMask:ShaderFeatures, feature:ShaderFeatures) : bool
    - IsSRPPass(snippetData:ShaderSnippetData) : bool
    - IsShaderGraphShader(shader:Shader, snippetData:ShaderSnippetData) : bool
    - StripUnusedPass(features:ShaderFeatures, snippetData:ShaderSnippetData) : bool
    - StripUnusedFeatures(features:ShaderFeatures, shader:Shader, snippetData:ShaderSnippetData, compilerData:ShaderCompilerData) : bool
    - StripUnsupportedVariants(compilerData:ShaderCompilerData) : bool
    - StripInvalidVariants(compilerData:ShaderCompilerData) : bool
    - StripUnused(features:ShaderFeatures, shader:Shader, snippetData:ShaderSnippetData, compilerData:ShaderCompilerData) : bool
    - ShouldLogShaderVariant(shader:Shader, snippetData:ShaderSnippetData) : bool
    - LogShaderVariants(shader:Shader, snippetData:ShaderSnippetData, prevVariantsCount:int, currVariantsCount:int) : void
    + OnProcessShader(shader:Shader, snippetData:ShaderSnippetData, compilerDataList:IList<ShaderCompilerData>) : void
}
class ShaderBuildPreprocessor {
    + {static} supportedFeaturesList : List<ShaderFeatures> <<get>>
    - {static} s_SupportedFeaturesList : List<ShaderFeatures>
    + callbackOrder : int <<get>>
    + OnPreprocessBuild(report:BuildReport) : void
    - {static} FetchAllSupportedFeatures() : void
    - {static} GetSupportedShaderFeatures() : ShaderFeatures
}
IPreprocessShaders <|-- ShaderPreprocessor
IPreprocessBuildWithReport <|-- ShaderBuildPreprocessor
@enduml
