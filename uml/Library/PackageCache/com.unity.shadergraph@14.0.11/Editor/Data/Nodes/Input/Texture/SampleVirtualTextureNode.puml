@startuml
class SampleVirtualTextureNode {
    + <<const>> DefaultNodeTitle : string = "Sample Virtual Texture"
    + <<const>> kMinLayers : int = 1
    + <<const>> kMaxLayers : int = 4
    + <<const>> UVInputId : int = 0
    + <<const>> VirtualTextureInputId : int = 1
    + <<const>> LODInputId : int = 2
    + <<const>> BiasInputId : int = 3
    + <<const>> DxInputId : int = 4
    + <<const>> DyInputId : int = 5
    + <<readonly>> OutputSlotIds : int[]
    <<const>> - UVInputName : string = "UV"
    <<const>> - VirtualTextureInputName : string = "VT"
    <<const>> - LODSlotName : string = "Lod"
    <<const>> - BiasSlotName : string = "Bias"
    <<const>> - DxSlotName : string = "Dx"
    <<const>> - DySlotName : string = "Dy"
    {static} - OutputSlotNames : string[]
    + <<override>> hasPreview : bool <<get>>
    - m_AddressMode : AddressMode
    + addressMode : AddressMode <<get>> <<set>>
    - m_LodCalculation : LodCalculation
    + lodCalculation : LodCalculation <<get>> <<set>>
    - m_SampleQuality : QualityMode
    + sampleQuality : QualityMode <<get>> <<set>>
    - m_EnableGlobalMipBias : bool = true
    + enableGlobalMipBias : bool <<get>> <<set>>
    - m_NoFeedback : bool
    + noFeedback : bool <<get>> <<set>>
    + SampleVirtualTextureNode()
    + SampleVirtualTextureNode(isLod:bool, noResolve:bool)
    + <<override>> Setup() : void
    - outputLayerSlotCount : int = 0
    - UpdateLayerOutputSlots(inspectProperty:bool, usedSlots:List<int>) : void
    + RebuildAllSlots(inspectProperty:bool) : void
    + <<override>> UpdateNodeAfterDeserialization() : void
    <<const>> - k_NoPropertyConnected : string = "A VirtualTexture property must be connected to the VT slot"
    + <<override>> ValidateNode() : void
    + GetFeedbackVariableName() : string
    - AppendVtParameters(sb:ShaderStringBuilder, uvExpr:string, lodExpr:string, dxExpr:string, dyExpr:string, address:AddressMode, filter:FilterMode, lod:LodCalculation, space:UvSpace, quality:QualityMode, enableGlobalMipBias:bool) : void
    - AppendVtSample(sb:ShaderStringBuilder, propertiesName:string, vtInputVariable:string, infoVariable:string, layerIndex:int, outputVariableName:string) : void
    - GetFunctionName(layerIndices:List<int>) : string
    + GenerateNodeFunction(registry:FunctionRegistry, generationMode:GenerationMode) : void
    + GenerateNodeCode(sb:ShaderStringBuilder, generationMode:GenerationMode) : void
    + <<override>> CollectShaderProperties(properties:PropertyCollector, generationMode:GenerationMode) : void
    + RequiresMeshUV(channel:Internal.UVChannel, stageCapability:ShaderStageCapability) : bool
    + RequiresTime() : bool
    + RequiresScreenPosition(stageCapability:ShaderStageCapability) : bool
}
enum LodCalculation {
    VtLevel_Automatic= 0,
    VtLevel_Lod= 1,
    VtLevel_Bias= 2,
    VtLevel_Derivatives= 3,
}
enum AddressMode {
    VtAddressMode_Wrap= 0,
    VtAddressMode_Clamp= 1,
}
enum FilterMode {
    VtFilter_Anisotropic= 0,
}
enum UvSpace {
    VtUvSpace_Regular= 0,
    VtUvSpace_PreTransformed= 1,
}
enum QualityMode {
    VtSampleQuality_Low= 0,
    VtSampleQuality_High= 1,
}
AbstractMaterialNode <|-- SampleVirtualTextureNode
IGeneratesBodyCode <|-- SampleVirtualTextureNode
IGeneratesFunction <|-- SampleVirtualTextureNode
IMayRequireMeshUV <|-- SampleVirtualTextureNode
IMayRequireTime <|-- SampleVirtualTextureNode
IMayRequireScreenPosition <|-- SampleVirtualTextureNode
SampleVirtualTextureNode +-- LodCalculation
SampleVirtualTextureNode +-- AddressMode
SampleVirtualTextureNode +-- FilterMode
SampleVirtualTextureNode +-- UvSpace
SampleVirtualTextureNode +-- QualityMode
@enduml
