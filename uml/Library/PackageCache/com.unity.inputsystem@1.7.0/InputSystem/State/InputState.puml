@startuml
class InputState <<static>> {
    + {static} currentUpdateType : InputUpdateType <<get>>
    + {static} updateCount : uint <<get>>
    + {static} currentTime : double <<get>>
    + {static} <<unsafe>> Change(device:InputDevice, eventPtr:InputEventPtr, updateType:InputUpdateType) : void
    + {static} Change(control:InputControl, state:TState, updateType:InputUpdateType, eventPtr:InputEventPtr) : void
    + {static} <<unsafe>> Change(control:InputControl, state:TState, updateType:InputUpdateType, eventPtr:InputEventPtr) : void
    + {static} IsIntegerFormat(format:FourCC) : bool
    + {static} AddChangeMonitor(control:InputControl, monitor:IInputStateChangeMonitor, monitorIndex:long, groupIndex:uint) : void
    + {static} AddChangeMonitor(control:InputControl, valueChangeCallback:NotifyControlValueChangeAction, monitorIndex:int, timerExpiredCallback:NotifyTimerExpiredAction) : IInputStateChangeMonitor
    + {static} RemoveChangeMonitor(control:InputControl, monitor:IInputStateChangeMonitor, monitorIndex:long) : void
    + {static} AddChangeMonitorTimeout(control:InputControl, monitor:IInputStateChangeMonitor, time:double, monitorIndex:long, timerIndex:int) : void
    + {static} RemoveChangeMonitorTimeout(monitor:IInputStateChangeMonitor, monitorIndex:long, timerIndex:int) : void
}
class StateChangeMonitorDelegate {
    + valueChangeCallback : NotifyControlValueChangeAction
    + timerExpiredCallback : NotifyTimerExpiredAction
    + NotifyControlStateChanged(control:InputControl, time:double, eventPtr:InputEventPtr, monitorIndex:long) : void
    + NotifyTimerExpired(control:InputControl, time:double, monitorIndex:long, timerIndex:int) : void
}
InputState +-- StateChangeMonitorDelegate
IInputStateChangeMonitor <|-- StateChangeMonitorDelegate
@enduml
