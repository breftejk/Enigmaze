@startuml
struct InputEventBuffer {
    + <<const>> BufferSizeUnknown : long
    + eventCount : int <<get>>
    + sizeInBytes : long <<get>>
    + capacityInBytes : long <<get>>
    + data : NativeArray<byte> <<get>>
    + bufferPtr : InputEventPtr <<get>>
    + InputEventBuffer(eventPtr:InputEvent*, eventCount:int, sizeInBytes:int, capacityInBytes:int)
    + InputEventBuffer(buffer:NativeArray<byte>, eventCount:int, sizeInBytes:int, transferNativeArrayOwnership:bool)
    + AppendEvent(eventPtr:InputEvent*, capacityIncrementInBytes:int, allocator:Allocator) : void
    + AllocateEvent(sizeInBytes:int, capacityIncrementInBytes:int, allocator:Allocator) : InputEvent*
    + Contains(eventPtr:InputEvent*) : bool
    + Reset() : void
    <<internal>> AdvanceToNextEvent(currentReadPos:InputEvent*, currentWritePos:InputEvent*, numEventsRetainedInBuffer:int, numRemainingEvents:int, leaveEventInBuffer:bool) : void
    + GetEnumerator() : IEnumerator<InputEventPtr>
    - GetEnumerator() : IEnumerator
    + Dispose() : void
    + Clone() : InputEventBuffer
    - Clone() : object
    - m_Buffer : NativeArray<byte>
    - m_SizeInBytes : long
    - m_EventCount : int
    - m_WeOwnTheBuffer : bool
}
struct Enumerator {
    - <<readonly>> m_Buffer : InputEvent*
    - <<readonly>> m_EventCount : int
    - m_CurrentEvent : InputEvent*
    - m_CurrentIndex : int
    + Enumerator(buffer:InputEventBuffer)
    + MoveNext() : bool
    + Reset() : void
    + Dispose() : void
    + Current : InputEventPtr <<get>>
    - Current : object <<get>>
}
"IEnumerable`1" "<InputEventPtr>" <|-- InputEventBuffer
IDisposable <|-- InputEventBuffer
ICloneable <|-- InputEventBuffer
InputEventBuffer +-- Enumerator
"IEnumerator`1" "<InputEventPtr>" <|-- Enumerator
@enduml
