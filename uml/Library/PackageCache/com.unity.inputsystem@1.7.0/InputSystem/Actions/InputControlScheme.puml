@startuml
struct InputControlScheme {
    + name : string <<get>>
    + bindingGroup : string <<get>> <<set>>
    + deviceRequirements : ReadOnlyArray<DeviceRequirement> <<get>>
    + InputControlScheme(name:string, devices:IEnumerable<DeviceRequirement>, bindingGroup:string)
    <<internal>> SetNameAndBindingGroup(name:string, bindingGroup:string) : void
    + {static} FindControlSchemeForDevices(devices:TDevices, schemes:TSchemes, mustIncludeDevice:InputDevice, allowUnsuccesfulMatch:bool) : InputControlScheme?
    + {static} FindControlSchemeForDevices(devices:TDevices, schemes:TSchemes, controlScheme:InputControlScheme, matchResult:MatchResult, mustIncludeDevice:InputDevice, allowUnsuccessfulMatch:bool) : bool
    + {static} FindControlSchemeForDevice(device:InputDevice, schemes:TSchemes) : InputControlScheme?
    + SupportsDevice(device:InputDevice) : bool
    + PickDevicesFrom(devices:TDevices, favorDevice:InputDevice) : MatchResult
    + Equals(other:InputControlScheme) : bool
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
    + <<override>> ToString() : string
    <<internal>> m_Name : string
    <<internal>> m_BindingGroup : string
    <<internal>> m_DeviceRequirements : DeviceRequirement[]
}
struct MatchResult {
    + score : float <<get>>
    + isSuccessfulMatch : bool <<get>>
    + hasMissingRequiredDevices : bool <<get>>
    + hasMissingOptionalDevices : bool <<get>>
    + devices : InputControlList<InputDevice> <<get>>
    + GetEnumerator() : IEnumerator<Match>
    - GetEnumerator() : IEnumerator
    + Dispose() : void
    <<internal>> m_Result : Result
    <<internal>> m_Score : float
    <<internal>> m_Devices : InputControlList<InputDevice>
    <<internal>> m_Controls : InputControlList<InputControl>
    <<internal>> m_Requirements : DeviceRequirement[]
}
struct DeviceRequirement {
    + controlPath : string <<get>> <<set>>
    + isOptional : bool <<get>> <<set>>
    + isAND : bool <<get>> <<set>>
    + isOR : bool <<get>> <<set>>
    <<internal>> m_ControlPath : string
    <<internal>> m_Flags : Flags
    + <<override>> ToString() : string
    + Equals(other:DeviceRequirement) : bool
    + <<override>> Equals(obj:object) : bool
    + <<override>> GetHashCode() : int
}
struct SchemeJson {
    + name : string
    + bindingGroup : string
    + devices : DeviceJson[]
    + ToScheme() : InputControlScheme
    + {static} ToJson(scheme:InputControlScheme) : SchemeJson
    + {static} ToJson(schemes:InputControlScheme[]) : SchemeJson[]
    + {static} ToSchemes(schemes:SchemeJson[]) : InputControlScheme[]
}
enum Result {
    AllSatisfied,
    MissingRequired,
    MissingOptional,
}
struct Match {
    + control : InputControl <<get>>
    + device : InputDevice <<get>>
    + requirementIndex : int <<get>>
    + requirement : DeviceRequirement <<get>>
    + isOptional : bool <<get>>
    <<internal>> m_RequirementIndex : int
    <<internal>> m_Requirements : DeviceRequirement[]
    <<internal>> m_Controls : InputControlList<InputControl>
}
struct Enumerator {
    + MoveNext() : bool
    + Reset() : void
    + Current : Match <<get>>
    - Current : object <<get>>
    + Dispose() : void
    <<internal>> m_Index : int
    <<internal>> m_Requirements : DeviceRequirement[]
    <<internal>> m_Controls : InputControlList<InputControl>
}
enum Flags {
    None= 0,
    Optional= 1 << 0,
    Or= 1 << 1,
}
struct DeviceJson {
    + devicePath : string
    + isOptional : bool
    + isOR : bool
    + ToDeviceEntry() : DeviceRequirement
    + {static} From(requirement:DeviceRequirement) : DeviceJson
}
"IEquatable`1" "<InputControlScheme>" <|-- InputControlScheme
InputControlScheme +-- MatchResult
"IEnumerable`1" "<MatchResult.Match>" <|-- MatchResult
IDisposable <|-- MatchResult
InputControlScheme +-- DeviceRequirement
"IEquatable`1" "<DeviceRequirement>" <|-- DeviceRequirement
InputControlScheme +-- SchemeJson
MatchResult +-- Result
MatchResult +-- Match
MatchResult +-- Enumerator
"IEnumerator`1" "<Match>" <|-- Enumerator
DeviceRequirement +-- Flags
SchemeJson +-- DeviceJson
@enduml
