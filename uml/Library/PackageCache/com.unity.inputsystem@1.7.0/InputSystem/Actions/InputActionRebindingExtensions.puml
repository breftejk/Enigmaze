@startuml
class InputActionRebindingExtensions <<static>> <<partial>> {
    + {static} GetBindingIndex(action:InputAction, bindingMask:InputBinding) : int
    + {static} GetBindingIndex(actionMap:InputActionMap, bindingMask:InputBinding) : int
    + {static} GetBindingIndex(action:InputAction, group:string, path:string) : int
    + {static} GetBindingForControl(action:InputAction, control:InputControl) : InputBinding?
    + {static} <<unsafe>> GetBindingIndexForControl(action:InputAction, control:InputControl) : int
    + {static} GetBindingDisplayString(action:InputAction, options:InputBinding.DisplayStringOptions, group:string) : string
    + {static} GetBindingDisplayString(action:InputAction, bindingMask:InputBinding, options:InputBinding.DisplayStringOptions) : string
    + {static} GetBindingDisplayString(action:InputAction, bindingIndex:int, options:InputBinding.DisplayStringOptions) : string
    + {static} <<unsafe>> GetBindingDisplayString(action:InputAction, bindingIndex:int, deviceLayoutName:string, controlPath:string, options:InputBinding.DisplayStringOptions) : string
    + {static} ApplyBindingOverride(action:InputAction, newPath:string, group:string, path:string) : void
    + {static} ApplyBindingOverride(action:InputAction, bindingOverride:InputBinding) : void
    + {static} ApplyBindingOverride(action:InputAction, bindingIndex:int, bindingOverride:InputBinding) : void
    + {static} ApplyBindingOverride(action:InputAction, bindingIndex:int, path:string) : void
    + {static} ApplyBindingOverride(actionMap:InputActionMap, bindingOverride:InputBinding) : int
    + {static} ApplyBindingOverride(actionMap:InputActionMap, bindingIndex:int, bindingOverride:InputBinding) : void
    + {static} RemoveBindingOverride(action:InputAction, bindingIndex:int) : void
    + {static} RemoveBindingOverride(action:InputAction, bindingMask:InputBinding) : void
    - {static} RemoveBindingOverride(actionMap:InputActionMap, bindingMask:InputBinding) : void
    + {static} RemoveAllBindingOverrides(actions:IInputActionCollection2) : void
    + {static} RemoveAllBindingOverrides(action:InputAction) : void
    + {static} ApplyBindingOverrides(actionMap:InputActionMap, overrides:IEnumerable<InputBinding>) : void
    + {static} RemoveBindingOverrides(actionMap:InputActionMap, overrides:IEnumerable<InputBinding>) : void
    + {static} ApplyBindingOverridesOnMatchingControls(action:InputAction, control:InputControl) : int
    + {static} ApplyBindingOverridesOnMatchingControls(actionMap:InputActionMap, control:InputControl) : int
    + {static} SaveBindingOverridesAsJson(actions:IInputActionCollection2) : string
    + {static} SaveBindingOverridesAsJson(action:InputAction) : string
    - {static} AddBindingOverrideJsonTo(actions:IInputActionCollection2, binding:InputBinding, list:List<InputActionMap.BindingOverrideJson>, action:InputAction) : void
    + {static} LoadBindingOverridesFromJson(actions:IInputActionCollection2, json:string, removeExisting:bool) : void
    + {static} LoadBindingOverridesFromJson(action:InputAction, json:string, removeExisting:bool) : void
    - {static} LoadBindingOverridesFromJsonInternal(actions:IInputActionCollection2, json:string) : void
    + {static} PerformInteractiveRebinding(action:InputAction, bindingIndex:int) : RebindingOperation
    <<internal>> {static} DeferBindingResolution() : DeferBindingResolutionWrapper
    - {static} s_DeferBindingResolutionWrapper : DeferBindingResolutionWrapper
}
class RebindingOperation <<sealed>> {
    + <<const>> kDefaultMagnitudeThreshold : float = 0.2f
    + action : InputAction <<get>>
    + bindingMask : InputBinding? <<get>>
    + candidates : InputControlList<InputControl> <<get>>
    + scores : ReadOnlyArray<float> <<get>>
    + magnitudes : ReadOnlyArray<float> <<get>>
    + selectedControl : InputControl <<get>>
    + started : bool <<get>>
    + completed : bool <<get>>
    + canceled : bool <<get>>
    + startTime : double <<get>>
    + timeout : float <<get>>
    + expectedControlType : string <<get>>
    + WithAction(action:InputAction) : RebindingOperation
    + WithMatchingEventsBeingSuppressed(value:bool) : RebindingOperation
    + WithCancelingThrough(binding:string) : RebindingOperation
    + WithCancelingThrough(control:InputControl) : RebindingOperation
    + WithExpectedControlType(layoutName:string) : RebindingOperation
    + WithExpectedControlType(type:Type) : RebindingOperation
    + WithExpectedControlType() : RebindingOperation
    + WithTargetBinding(bindingIndex:int) : RebindingOperation
    + WithBindingMask(bindingMask:InputBinding?) : RebindingOperation
    + WithBindingGroup(group:string) : RebindingOperation
    + WithoutGeneralizingPathOfSelectedControl() : RebindingOperation
    + WithRebindAddingNewBinding(group:string) : RebindingOperation
    + WithMagnitudeHavingToBeGreaterThan(magnitude:float) : RebindingOperation
    + WithoutIgnoringNoisyControls() : RebindingOperation
    + WithControlsHavingToMatchPath(path:string) : RebindingOperation
    + WithControlsExcluding(path:string) : RebindingOperation
    + WithTimeout(timeInSeconds:float) : RebindingOperation
    + OnComplete(callback:Action<RebindingOperation>) : RebindingOperation
    + OnCancel(callback:Action<RebindingOperation>) : RebindingOperation
    + OnPotentialMatch(callback:Action<RebindingOperation>) : RebindingOperation
    + OnGeneratePath(callback:Func<InputControl, string>) : RebindingOperation
    + OnComputeScore(callback:Func<InputControl, InputEventPtr, float>) : RebindingOperation
    + OnApplyBinding(callback:Action<RebindingOperation, string>) : RebindingOperation
    + OnMatchWaitForAnother(seconds:float) : RebindingOperation
    + Start() : RebindingOperation
    + Cancel() : void
    + Complete() : void
    + AddCandidate(control:InputControl, score:float, magnitude:float) : void
    + RemoveCandidate(control:InputControl) : void
    + Dispose() : void
    + Reset() : RebindingOperation
    - HookOnEvent() : void
    - UnhookOnEvent() : void
    - <<unsafe>> OnEvent(eventPtr:InputEventPtr, device:InputDevice) : void
    - SortCandidatesByScore() : void
    - {static} HavePathMatch(control:InputControl, paths:string[], pathCount:int) : bool
    - HookOnAfterUpdate() : void
    - UnhookOnAfterUpdate() : void
    - OnAfterUpdate() : void
    - OnComplete() : void
    - OnCancel() : void
    - ResetAfterMatchCompleted() : void
    - ThrowIfRebindInProgress() : void
    - GeneratePathForControl(control:InputControl) : string
    - m_ActionToRebind : InputAction
    - m_BindingMask : InputBinding?
    - m_ControlType : Type
    - m_ExpectedLayout : InternedString
    - m_IncludePathCount : int
    - m_IncludePaths : string[]
    - m_ExcludePathCount : int
    - m_ExcludePaths : string[]
    - m_TargetBindingIndex : int
    - m_BindingGroupForNewBinding : string
    - m_CancelBinding : string
    - m_MagnitudeThreshold : float
    - m_Scores : float[]
    - m_Magnitudes : float[]
    - m_LastMatchTime : double
    - m_StartTime : double
    - m_Timeout : float
    - m_WaitSecondsAfterMatch : float
    - m_Candidates : InputControlList<InputControl>
    - m_OnComplete : Action<RebindingOperation>
    - m_OnCancel : Action<RebindingOperation>
    - m_OnPotentialMatch : Action<RebindingOperation>
    - m_OnGeneratePath : Func<InputControl, string>
    - m_OnComputeScore : Func<InputControl, InputEventPtr, float>
    - m_OnApplyBinding : Action<RebindingOperation, string>
    - m_OnEventDelegate : Action<InputEventPtr, InputDevice>
    - m_OnAfterUpdateDelegate : Action
    - m_LayoutCache : InputControlLayout.Cache
    - m_PathBuilder : StringBuilder
    - m_Flags : Flags
    - m_StartingActuations : Dictionary<InputControl, float>
}
class DeferBindingResolutionWrapper {
    + Acquire() : void
    + Dispose() : void
}
enum Flags {
    Started= 1 << 0,
    Completed= 1 << 1,
    Canceled= 1 << 2,
    OnEventHooked= 1 << 3,
    OnAfterUpdateHooked= 1 << 4,
    DontIgnoreNoisyControls= 1 << 6,
    DontGeneralizePathOfSelectedControl= 1 << 7,
    AddNewBinding= 1 << 8,
    SuppressMatchingEvents= 1 << 9,
}
InputActionRebindingExtensions +-- RebindingOperation
IDisposable <|-- RebindingOperation
InputActionRebindingExtensions +-- DeferBindingResolutionWrapper
IDisposable <|-- DeferBindingResolutionWrapper
RebindingOperation +-- Flags
@enduml
