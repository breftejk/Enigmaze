@startuml
class "@SimpleActions" <<partial>> {
    + asset : InputActionAsset <<get>>
    + @SimpleActions()
    + Dispose() : void
    + bindingMask : InputBinding? <<get>> <<set>>
    + devices : ReadOnlyArray<InputDevice>? <<get>> <<set>>
    + controlSchemes : ReadOnlyArray<InputControlScheme> <<get>>
    + Contains(action:InputAction) : bool
    + GetEnumerator() : IEnumerator<InputAction>
    - GetEnumerator() : IEnumerator
    + Enable() : void
    + Disable() : void
    + bindings : IEnumerable<InputBinding> <<get>>
    + FindAction(actionNameOrId:string, throwIfNotFound:bool) : InputAction
    + FindBinding(bindingMask:InputBinding, action:InputAction) : int
    - <<readonly>> m_gameplay : InputActionMap
    - m_GameplayActionsCallbackInterface : IGameplayActions
    - <<readonly>> m_gameplay_move : InputAction
    - <<readonly>> m_gameplay_jump : InputAction
    + @gameplay : GameplayActions <<get>>
}
struct GameplayActions {
    - m_Wrapper : @SimpleActions
    + GameplayActions(wrapper:@SimpleActions)
    + @move : InputAction <<get>>
    + @jump : InputAction <<get>>
    + Get() : InputActionMap
    + Enable() : void
    + Disable() : void
    + enabled : bool <<get>>
    + SetCallbacks(instance:IGameplayActions) : void
}
interface IGameplayActions {
    OnMove(context:InputAction.CallbackContext) : void
    OnJump(context:InputAction.CallbackContext) : void
}
IInputActionCollection2 <|-- "@SimpleActions"
IDisposable <|-- "@SimpleActions"
"@SimpleActions" +-- GameplayActions
"@SimpleActions" +-- IGameplayActions
@enduml
