@startuml
class SpriteOrderController {
    - spriteRenderer : SpriteRenderer
    + yOffset : float = 0.0f
    + runOnlyOnce : bool = false
    - Awake() : void
    - Start() : void
    - Update() : void
    - UpdateSortingOrder() : void
}
MonoBehaviour <|-- SpriteOrderController
class ScoreManager {
    + {static} Instance : ScoreManager
    - score : int = 0
    + scoreText : Text
    - Awake() : void
    + AddScore(points:int) : void
    + ResetScore() : void
    - UpdateScoreUI() : void
}
MonoBehaviour <|-- ScoreManager
class GameManager {
    + {static} Instance : GameManager
    + Username : string <<get>> = ""
    + CurrentLevel : int <<get>> = 1
    - Awake() : void
    + SetUsername(name:string) : void
    + IncrementLevel() : void
    + ResetProgress() : void
    - LoadProgress() : void
}
MonoBehaviour <|-- GameManager
class Key {
    - OnTriggerEnter2D(other:Collider2D) : void
}
MonoBehaviour <|-- Key
class Lever {
    + doorToOpen : Door
    + leverActiveSprite : Sprite
    - spriteRenderer : SpriteRenderer
    - Awake() : void
    - OnTriggerEnter2D(other:Collider2D) : void
    - ActivateLever() : void
}
MonoBehaviour <|-- Lever
class HealingItem {
    + healthAmount : int = 20
    - OnTriggerEnter2D(other:Collider2D) : void
}
MonoBehaviour <|-- HealingItem
class SpeedBoostingItem {
    + speedMultiplier : float = 2.0f
    + duration : float = 5.0f
    - OnTriggerEnter2D(other:Collider2D) : void
    - ApplySpeedBoost(player:Collider2D) : IEnumerator
}
MonoBehaviour <|-- SpeedBoostingItem
class Trap {
    + damagePerSecond : float = 5f
    - OnTriggerEnter2D(other:Collider2D) : void
    - OnTriggerExit2D(other:Collider2D) : void
    - DamageOverTime(player:Collider2D) : IEnumerator
}
MonoBehaviour <|-- Trap
class Door {
    + openDoorSprite : Sprite
    - spriteRenderer : SpriteRenderer
    - boxCollider : BoxCollider2D
    - Awake() : void
    - OnTriggerEnter2D(other:Collider2D) : void
    + OpenDoor() : void
}
MonoBehaviour <|-- Door
class Health {
    + maxHealth : float = 100f
    + currentHealth : float
    + animator : Animator
    + healthSlider : Slider
    + healthBarUIPrefab : GameObject
    + healthBarOffset : Vector3
    - Start() : void
    + TakeDamage(amount:float) : void
    + Heal(amount:float) : void
    - Die() : void
    - RemoveCharacterAfterDelay(delay:float) : IEnumerator
}
MonoBehaviour <|-- Health
IHealth <|-- Health
class PlayerController {
    - movementInput : Vector2
    - FixedUpdate() : void
    - OnMove(movementValue:InputValue) : void
    + OnFire() : void
}
CharacterBaseController <|-- PlayerController
interface IHealth {
    TakeDamage(amount:float) : void
    Heal(amount:float) : void
}
class AIEnemyController {
    + target : Transform
    + stopDistance : float = 0.1f
    + obstacleDetectionDistance : float = 1f
    + sideDetectionAngle : float = 45f
    + detectionRadius : float = 5f
    - FixedUpdate() : void
    - AvoidObstacles(direction:Vector2) : Vector2
    - UpdateAnimation(direction:Vector2) : void
}
CharacterBaseController <|-- AIEnemyController
class Attack {
    + animator : Animator
    + swordBoxCollider : BoxCollider2D
    + attackDamage : float = 10f
    + attackDuration : float = 0.1f
    + attackCooldown : float = 3f
    - _canAttack : bool = true
    - _isAttacking : bool = false
    - Start() : void
    - OnTriggerEnter2D(collision:Collider2D) : void
    + TriggerAttack() : void
    - PlayAttackSound() : void
    - PerformAttack() : IEnumerator
    - DamageTarget(target:Collider2D, message:string) : void
}
MonoBehaviour <|-- Attack
IAttack <|-- Attack
interface ICharacterController {
    TryMoving(direction:Vector2) : bool
}
abstract class CharacterBaseController {
    + movementSpeed : float = 1f
    - # attackComponent : Attack <<get>>
    + contactFilter : ContactFilter2D
    - # health : IHealth <<get>>
    - # animator : Animator <<get>>
    - # isWalking : bool = false
    - # spriteRenderer : SpriteRenderer <<get>>
    - rb : Rigidbody2D <<get>>
    - <<readonly>> _collisions : List<RaycastHit2D>
    + TryMoving(direction:Vector2) : bool
    - MoveInDirection(direction:Vector2) : bool
}
MonoBehaviour <|-- CharacterBaseController
interface IAttack {
    TriggerAttack() : void
}
class HealthBarFollow {
    + target : Transform
    + offset : Vector3
    - LateUpdate() : void
}
MonoBehaviour <|-- HealthBarFollow
class Key {
    + Interact(interactor:GameObject) : void
    - OnTriggerEnter2D(other:Collider2D) : void
}
MonoBehaviour <|-- Key
IInteractable <|-- Key
class Lever {
    + doorToOpen : Door
    + leverActiveSprite : Sprite
    - spriteRenderer : SpriteRenderer
    - Awake() : void
    + Interact(interactor:GameObject) : void
    - OnTriggerEnter2D(other:Collider2D) : void
}
MonoBehaviour <|-- Lever
IInteractable <|-- Lever
interface IInteractable {
    Interact(interactor:GameObject) : void
}
class HealingItem {
    + healthAmount : int = 20
    + Interact(interactor:GameObject) : void
    - OnTriggerEnter2D(other:Collider2D) : void
}
MonoBehaviour <|-- HealingItem
IInteractable <|-- HealingItem
class SpeedBoostingItem {
    + speedMultiplier : float = 2.0f
    + duration : float = 1.0f
    - isUsed : bool = false
    - spriteRenderer : SpriteRenderer
    - collider : Collider2D
    - Awake() : void
    + Interact(interactor:GameObject) : void
    - ApplySpeedBoost(player:PlayerController) : IEnumerator
    - OnTriggerEnter2D(other:Collider2D) : void
}
MonoBehaviour <|-- SpeedBoostingItem
IInteractable <|-- SpeedBoostingItem
interface IUnlockable {
    Unlock() : void
}
class Trap {
    + damagePerSecond : float = 5f
    + Interact(interactor:GameObject) : void
    - OnTriggerEnter2D(other:Collider2D) : void
    - OnTriggerExit2D(other:Collider2D) : void
    - DamageOverTime(health:IHealth) : IEnumerator
}
MonoBehaviour <|-- Trap
IInteractable <|-- Trap
class Door {
    + openDoorSprite : Sprite
    - spriteRenderer : SpriteRenderer
    - boxCollider : BoxCollider2D
    - Awake() : void
    + Unlock() : void
}
MonoBehaviour <|-- Door
IUnlockable <|-- Door
@enduml
